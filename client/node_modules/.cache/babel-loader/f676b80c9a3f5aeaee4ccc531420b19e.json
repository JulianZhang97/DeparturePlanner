{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\zhang\\\\OneDrive\\\\Documents\\\\Personal Projects\\\\departure-planner\\\\react-backend\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\zhang\\\\OneDrive\\\\Documents\\\\Personal Projects\\\\departure-planner\\\\react-backend\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\zhang\\\\OneDrive\\\\Documents\\\\Personal Projects\\\\departure-planner\\\\react-backend\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\zhang\\\\OneDrive\\\\Documents\\\\Personal Projects\\\\departure-planner\\\\react-backend\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\zhang\\\\OneDrive\\\\Documents\\\\Personal Projects\\\\departure-planner\\\\react-backend\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\zhang\\\\OneDrive\\\\Documents\\\\Personal Projects\\\\departure-planner\\\\react-backend\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\zhang\\\\OneDrive\\\\Documents\\\\Personal Projects\\\\departure-planner\\\\react-backend\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\zhang\\\\OneDrive\\\\Documents\\\\Personal Projects\\\\departure-planner\\\\react-backend\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\zhang\\\\OneDrive\\\\Documents\\\\Personal Projects\\\\departure-planner\\\\react-backend\\\\client\\\\src\\\\components\\\\ResultPage.js\";\nimport React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Icon from '@material-ui/core/Icon';\nimport Grid from '@material-ui/core/Grid';\nimport Fab from '@material-ui/core/Fab';\nimport DirectionsMap from './DirectionsMap.js';\nimport './Style.css';\nimport axios from 'axios';\nimport moment from 'moment';\n\nvar ResultPage =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ResultPage, _Component);\n\n  function ResultPage(props) {\n    var _this;\n\n    _classCallCheck(this, ResultPage);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ResultPage).call(this, props));\n    _this.state = {\n      departureSite: _this.props.location.state.departureSite,\n      arrivalSite: _this.props.location.state.arrivalSite,\n      airline: _this.props.location.state.airline,\n      flightNum: _this.props.location.state.flightNum,\n      flightDate: _this.props.location.state.flightDate,\n      homeAddress: _this.props.location.state.homeAddress,\n      curDate: _this.props.location.state.curDate,\n      flightExists: null,\n      departureTime: \"2019-01-26T19:50:00\",\n      departureTimeZone: \"-0500\",\n      departureTimeStr: \"\",\n      worstCaseResult: null,\n      regularCaseResult: null,\n      bestCaseResult: null,\n      message: \"\",\n      travelInfo: \"\"\n    };\n    _this.searchFlight = _this.searchFlight.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.getDepartureDetails = _this.getDepartureDetails.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.calculateDeparture = _this.calculateDeparture.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(ResultPage, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var apiKey;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                apiKey = process.env.REACT_APP_GOOGLE_API_KEY;\n                this.setState({\n                  mapsAPI: apiKey\n                }); // await this.searchFlight();\n                // if(this.state.flightExists === true){\n                //   this.calculateDeparture();\n                // }\n\n                this.calculateDeparture();\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"searchFlight\",\n    value: function () {\n      var _searchFlight = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var flightSearchKey, proxyurl, init, self;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                flightSearchKey = process.env.REACT_APP_FLIGHT_API_KEY;\n                proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n                init = {\n                  headers: {\n                    \"Ocp-Apim-Subscription-Key\": flightSearchKey\n                  },\n                  params: {\n                    \"Airline\": this.state.airline,\n                    \"FlightNumber\": this.state.flightNum\n                  }\n                };\n                self = this;\n                _context2.next = 6;\n                return axios.get(proxyurl + \"https://flightlookup.azure-api.net/v1/xml/TimeTable/\" + this.state.departureSite + \"/\" + this.state.arrivalSite + \"/\" + this.state.flightDate, init).then(function (response) {\n                  console.log(\"Successfully retrieved flight\");\n                  self.getDepartureDetails(response.data);\n                }).catch(function (error) {\n                  console.log(error);\n                });\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function searchFlight() {\n        return _searchFlight.apply(this, arguments);\n      }\n\n      return searchFlight;\n    }()\n  }, {\n    key: \"getDepartureDetails\",\n    value: function getDepartureDetails(flightData) {\n      var parser = new DOMParser();\n      var xmlDoc = parser.parseFromString(flightData, \"text/xml\");\n\n      if (!xmlDoc.getElementsByTagName(\"Success\").length === 0) {\n        console.log(\"Search Failed!\");\n        this.setState({\n          flightExists: false\n        });\n      } else {\n        var departureTime = xmlDoc.getElementsByTagName(\"FlightDetails\").item(0).getAttribute(\"FLSDepartureDateTime\");\n        var departureTimeZone = xmlDoc.getElementsByTagName(\"FlightDetails\").item(0).getAttribute(\"FLSDepartureTimeOffset\");\n        this.setState({\n          departureTime: departureTime,\n          departureTimeZone: departureTimeZone\n        });\n        this.setState({\n          flightExists: true\n        });\n      }\n    }\n  }, {\n    key: \"calculateDeparture\",\n    value: function () {\n      var _calculateDeparture = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var _this2 = this;\n\n        var recommendedAirportTime, minimumAirportTime, flightDepartureTime, curTime, recommendedAirportArrivalTime, duration, currentTravelTime, recommendedDepartureTime, minsUntilDeparture, worstCaseDuration, worstCaseTravelTime, estimatedWorstCaseDepartureTime, minsUntilWorstCaseDeparture, latestAirportArrivalTime, latestNormalDepartureTime, minsUntilLatestNormalDeparture, bestCaseDuration, bestCaseTravelTime, latestAbsoluteDepartureTime, minsUntilLatestAbsoluteDeparture;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                //The RECOMMENDED # of minutes to arrive before departure \n                recommendedAirportTime = 120; //The MINIMUM # of minutes to arrive before departure\n\n                minimumAirportTime = 60;\n                flightDepartureTime = moment(this.state.departureTime + this.state.departureTimeZone);\n                this.setState({\n                  departureTimeStr: flightDepartureTime.format('MMM Do YYYY, h:mma')\n                });\n                curTime = moment();\n                _context3.next = 7;\n                return axios.get('/time?' + 'origin=' + this.state.homeAddress + '&destination=' + this.state.departureSite + '&trafficMode=best_guess').then(function (res) {\n                  return _this2.setState({\n                    regularCaseResult: res.data.directions.routes[0].legs[0]\n                  });\n                });\n\n              case 7:\n                //The recommended air port arrival time \n                recommendedAirportArrivalTime = flightDepartureTime.clone().subtract(recommendedAirportTime, 'minutes'); //Travel time in minutes \n\n                duration = moment.duration(this.state.regularCaseResult.duration_in_traffic.value, 'seconds');\n                currentTravelTime = duration.humanize();\n                recommendedDepartureTime = recommendedAirportArrivalTime.clone().subtract(currentTravelTime, 'minutes'); //See if flight departure time minus recommended arrival gap minus bestguess travel time is < 90 mins\n\n                minsUntilDeparture = moment.duration(recommendedDepartureTime.diff(curTime)).asMinutes(); //If > 90 mins, let user know lots of time left but remind users that traffic conditions change may be a factor\n                //display bestguess time directions and travel time \n\n                if (!(minsUntilDeparture > 90)) {\n                  _context3.next = 17;\n                  break;\n                }\n\n                this.setState({\n                  travelInfo: \"Current Travel Time: \" + currentTravelTime\n                });\n                this.setState({\n                  message: \"Over an hour left until you need to leave based on estimated travel time\" + \"and flight departure! However, keep in mind that traffic conditions may change from now until departure.\"\n                });\n                _context3.next = 59;\n                break;\n\n              case 17:\n                if (!(minsUntilDeparture > 30)) {\n                  _context3.next = 33;\n                  break;\n                }\n\n                _context3.prev = 18;\n                _context3.next = 21;\n                return axios.get('/time?' + 'origin=' + this.state.homeAddress + '&destination=' + this.state.departureSite + '&trafficMode=pessimistic').then(function (res) {\n                  return _this2.setState({\n                    worstCaseResult: res.data.directions.routes[0].legs[0]\n                  });\n                });\n\n              case 21:\n                _context3.next = 26;\n                break;\n\n              case 23:\n                _context3.prev = 23;\n                _context3.t0 = _context3[\"catch\"](18);\n                console.error('error fetching directions');\n\n              case 26:\n                //In case traffic is bad, check worst case traffic to see if user should leave earlier  \n                worstCaseDuration = moment.duration(this.state.worstCaseResult.duration_in_traffic.value, 'seconds');\n                worstCaseTravelTime = worstCaseDuration.humanize();\n                estimatedWorstCaseDepartureTime = recommendedAirportArrivalTime.clone().subtract(worstCaseTravelTime, 'minutes');\n                minsUntilWorstCaseDeparture = moment.duration(estimatedWorstCaseDepartureTime.diff(curTime)).asMinutes();\n\n                if (minsUntilWorstCaseDeparture < 30) {\n                  this.setState({\n                    travelInfo: \"Current Travel Time: \" + currentTravelTime + \"-\" + worstCaseTravelTime\n                  });\n                  this.setState({\n                    message: \"There is heavy traffic currently and your travel time may be much longer \" + \"than usual. We recommend that you leave soon.\"\n                  });\n                } else {\n                  this.setState({\n                    travelInfo: \"Current Travel Time: \" + currentTravelTime + \"-\" + worstCaseTravelTime\n                  });\n                  this.setState({\n                    message: \"You should not have to leave in the next 30 mins. However keep in mind traffic conditions may change.\"\n                  });\n                }\n\n                _context3.next = 59;\n                break;\n\n              case 33:\n                if (!(minsUntilDeparture > 0)) {\n                  _context3.next = 38;\n                  break;\n                }\n\n                this.setState({\n                  travelInfo: \"Current Travel Time: \" + currentTravelTime\n                });\n                this.setState({\n                  message: \"You should leave soon.\"\n                });\n                _context3.next = 59;\n                break;\n\n              case 38:\n                latestAirportArrivalTime = flightDepartureTime.clone().subtract(minimumAirportTime, 'minutes');\n                latestNormalDepartureTime = latestAirportArrivalTime.clone().subtract(currentTravelTime, 'minutes');\n                minsUntilLatestNormalDeparture = moment.duration(latestNormalDepartureTime.diff(curTime)).asMinutes();\n\n                if (!(minsUntilLatestNormalDeparture > 0)) {\n                  _context3.next = 46;\n                  break;\n                }\n\n                this.setState({\n                  travelInfo: \"Current Travel Time: \" + currentTravelTime\n                });\n                this.setState({\n                  message: \"You should leave immediately. Based on our projections, any traffic or airport delays may cause you to miss your flight.\"\n                });\n                _context3.next = 59;\n                break;\n\n              case 46:\n                _context3.prev = 46;\n                _context3.next = 49;\n                return axios.get('/time?' + 'origin=' + this.state.homeAddress + '&destination=' + this.state.departureSite + '&trafficMode=optimistic').then(function (res) {\n                  return _this2.setState({\n                    bestCaseResult: res.data.directions.routes[0].legs[0]\n                  });\n                });\n\n              case 49:\n                _context3.next = 54;\n                break;\n\n              case 51:\n                _context3.prev = 51;\n                _context3.t1 = _context3[\"catch\"](46);\n                console.error('error fetching directions');\n\n              case 54:\n                bestCaseDuration = moment.duration(this.state.bestCaseResult.duration_in_traffic.value, 'seconds');\n                bestCaseTravelTime = bestCaseDuration.humanize();\n                latestAbsoluteDepartureTime = latestAirportArrivalTime.clone().subtract(bestCaseTravelTime, 'minutes');\n                minsUntilLatestAbsoluteDeparture = moment.duration(latestAbsoluteDepartureTime.diff(curTime)).asMinutes();\n\n                if (minsUntilLatestAbsoluteDeparture > 0) {\n                  this.setState({\n                    travelInfo: \"Current Travel Time: \" + bestCaseTravelTime + \"-\" + currentTravelTime\n                  });\n                  this.setState({\n                    message: \"We recommend you leave immediately. Based on our projections, any traffic or airport delays may cause you to miss your flight.\"\n                  });\n                } else {\n                  this.setState({\n                    travelInfo: \"Current Travel Time: \" + bestCaseTravelTime + \"-\" + currentTravelTime\n                  });\n                  this.setState({\n                    message: \"According to our calculations, you are most likely unable to make this flight.\"\n                  });\n                }\n\n              case 59:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[18, 23], [46, 51]]);\n      }));\n\n      function calculateDeparture() {\n        return _calculateDeparture.apply(this, arguments);\n      }\n\n      return calculateDeparture;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        id: \"main-page\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"result-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"header-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239\n        },\n        __self: this\n      }, \"DeparturePlanner\"), React.createElement(\"p\", {\n        className: \"header-subtext\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240\n        },\n        __self: this\n      }, \"Never miss a flight again\"), React.createElement(\"div\", {\n        className: \"cur-date\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242\n        },\n        __self: this\n      }, \" Current Time: \", \" \" + moment(this.state.curDate).format('MMM Do YYYY, h:mma'))), React.createElement(\"div\", {\n        className: \"new-search-button\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246\n        },\n        __self: this\n      }, React.createElement(Fab, {\n        variant: \"extended\",\n        \"aria-label\": \"Delete\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248\n        },\n        __self: this\n      }, \"home\"), \"Home\")), React.createElement(\"div\", {\n        className: \"result-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        container: true,\n        direction: \"column\",\n        justify: \"center\",\n        alignItems: \"center\",\n        spacing: 12,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        item: true,\n        xs: 3,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"travel-info\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260\n        },\n        __self: this\n      }, this.state.message), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261\n        },\n        __self: this\n      }, this.state.travelInfo))), React.createElement(Grid, {\n        item: true,\n        xs: 3,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"flight-info\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 265\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266\n        },\n        __self: this\n      }, \"Flight Information:\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 267\n        },\n        __self: this\n      }, this.state.airline, this.state.flightNum, \":  \", this.state.departureSite, \" \", React.createElement(Icon, {\n        className: \"plane-icon\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 267\n        },\n        __self: this\n      }, \"flight\"), \" \", this.state.arrivalSite), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268\n        },\n        __self: this\n      }, \"Departure Time: \", this.state.departureTimeStr)))), React.createElement(\"div\", {\n        className: \"map-pane\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272\n        },\n        __self: this\n      }, React.createElement(DirectionsMap, {\n        origin: this.state.homeAddress,\n        destination: this.state.departureSite,\n        travelMode: \"DRIVING\",\n        googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=\" + this.state.mapsAPI + \"&v=3.exp&libraries=geometry,drawing,places\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return ResultPage;\n}(Component);\n\nexport { ResultPage as default };","map":{"version":3,"sources":["C:\\Users\\zhang\\OneDrive\\Documents\\Personal Projects\\departure-planner\\react-backend\\client\\src\\components\\ResultPage.js"],"names":["React","Component","Button","Icon","Grid","Fab","DirectionsMap","axios","moment","ResultPage","props","state","departureSite","location","arrivalSite","airline","flightNum","flightDate","homeAddress","curDate","flightExists","departureTime","departureTimeZone","departureTimeStr","worstCaseResult","regularCaseResult","bestCaseResult","message","travelInfo","searchFlight","bind","getDepartureDetails","calculateDeparture","apiKey","process","env","REACT_APP_GOOGLE_API_KEY","setState","mapsAPI","flightSearchKey","REACT_APP_FLIGHT_API_KEY","proxyurl","init","headers","params","self","get","then","response","console","log","data","catch","error","flightData","parser","DOMParser","xmlDoc","parseFromString","getElementsByTagName","length","item","getAttribute","recommendedAirportTime","minimumAirportTime","flightDepartureTime","format","curTime","res","directions","routes","legs","recommendedAirportArrivalTime","clone","subtract","duration","duration_in_traffic","value","currentTravelTime","humanize","recommendedDepartureTime","minsUntilDeparture","diff","asMinutes","worstCaseDuration","worstCaseTravelTime","estimatedWorstCaseDepartureTime","minsUntilWorstCaseDeparture","latestAirportArrivalTime","latestNormalDepartureTime","minsUntilLatestNormalDeparture","bestCaseDuration","bestCaseTravelTime","latestAbsoluteDepartureTime","minsUntilLatestAbsoluteDeparture"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\n\r\nimport Button from '@material-ui/core/Button'\r\nimport Icon from '@material-ui/core/Icon'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Fab from '@material-ui/core/Fab';\r\n\r\nimport DirectionsMap from './DirectionsMap.js'\r\n\r\nimport './Style.css'\r\nimport axios from 'axios'\r\nimport moment from 'moment'\r\n\r\n\r\n\r\nexport default class ResultPage extends Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      departureSite: this.props.location.state.departureSite,\r\n      arrivalSite: this.props.location.state.arrivalSite,\r\n      airline: this.props.location.state.airline,\r\n      flightNum: this.props.location.state.flightNum,\r\n      flightDate: this.props.location.state.flightDate,\r\n      homeAddress: this.props.location.state.homeAddress,\r\n      curDate: this.props.location.state.curDate,\r\n\r\n      flightExists: null,\r\n\r\n      departureTime: \"2019-01-26T19:50:00\",\r\n      departureTimeZone: \"-0500\",\r\n      \r\n      departureTimeStr: \"\",\r\n\r\n      worstCaseResult: null,\r\n      regularCaseResult: null,\r\n      bestCaseResult: null,\r\n\r\n      message: \"\",\r\n      travelInfo: \"\",\r\n    }\r\n\r\n    this.searchFlight = this.searchFlight.bind(this);\r\n    this.getDepartureDetails = this.getDepartureDetails.bind(this);\r\n    this.calculateDeparture = this.calculateDeparture.bind(this);\r\n    \r\n  }\r\n\r\n  async componentDidMount(){\r\n      const apiKey = process.env.REACT_APP_GOOGLE_API_KEY;\r\n      this.setState({mapsAPI: apiKey})\r\n\r\n      // await this.searchFlight();\r\n      // if(this.state.flightExists === true){\r\n      //   this.calculateDeparture();\r\n      // }\r\n      \r\n      this.calculateDeparture();\r\n  }\r\n\r\n\r\n  async searchFlight(){\r\n    const flightSearchKey = process.env.REACT_APP_FLIGHT_API_KEY;\r\n    const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\r\n    const init = {\r\n      headers: {\r\n        \"Ocp-Apim-Subscription-Key\": flightSearchKey\r\n      },\r\n      params: {\r\n        \"Airline\": this.state.airline,\r\n        \"FlightNumber\": this.state.flightNum,\r\n      }\r\n    }\r\n    var self = this;\r\n    await axios.get(proxyurl + \"https://flightlookup.azure-api.net/v1/xml/TimeTable/\" \r\n    + this.state.departureSite + \"/\" + this.state.arrivalSite + \"/\" \r\n    + this.state.flightDate, init)\r\n    .then(function (response) {\r\n      console.log(\"Successfully retrieved flight\");\r\n      self.getDepartureDetails(response.data);      \r\n    })\r\n    .catch(function (error) {\r\n      console.log(error);\r\n    });\r\n  }\r\n\r\n\r\n  getDepartureDetails(flightData){\r\n    var parser = new DOMParser();\r\n    var xmlDoc = parser.parseFromString(flightData,\"text/xml\");\r\n    \r\n    if(!xmlDoc.getElementsByTagName(\"Success\").length === 0){\r\n      console.log(\"Search Failed!\");\r\n      this.setState({flightExists: false});\r\n    }\r\n\r\n    else{\r\n      var departureTime = xmlDoc.getElementsByTagName(\"FlightDetails\").item(0).getAttribute(\"FLSDepartureDateTime\");\r\n      var departureTimeZone = xmlDoc.getElementsByTagName(\"FlightDetails\").item(0).getAttribute(\"FLSDepartureTimeOffset\");\r\n\r\n      this.setState({departureTime: departureTime, departureTimeZone: departureTimeZone});\r\n      this.setState({flightExists: true});\r\n    }\r\n  }\r\n\r\n\r\n  async calculateDeparture(){\r\n    //The RECOMMENDED # of minutes to arrive before departure \r\n    const recommendedAirportTime = 120;\r\n\r\n    //The MINIMUM # of minutes to arrive before departure\r\n    const minimumAirportTime = 60;\r\n\r\n    const flightDepartureTime = moment(this.state.departureTime + this.state.departureTimeZone);\r\n    this.setState({departureTimeStr: flightDepartureTime.format('MMM Do YYYY, h:mma')})\r\n\r\n    const curTime = moment();\r\n    \r\n    await axios.get('/time?' + 'origin=' + this.state.homeAddress + '&destination=' + this.state.departureSite +  '&trafficMode=best_guess')\r\n      .then(res => this.setState({regularCaseResult: res.data.directions.routes[0].legs[0]}));\r\n   \r\n    //The recommended air port arrival time \r\n    const recommendedAirportArrivalTime = flightDepartureTime.clone().subtract(recommendedAirportTime, 'minutes');\r\n\r\n\r\n    //Travel time in minutes \r\n    var duration = moment.duration(this.state.regularCaseResult.duration_in_traffic.value, 'seconds');\r\n    const currentTravelTime = duration.humanize();\r\n\r\n\r\n    const recommendedDepartureTime =  recommendedAirportArrivalTime.clone().subtract(currentTravelTime, 'minutes');\r\n\r\n    //See if flight departure time minus recommended arrival gap minus bestguess travel time is < 90 mins\r\n    const minsUntilDeparture = moment.duration(recommendedDepartureTime.diff(curTime)).asMinutes(); \r\n\r\n\r\n    //If > 90 mins, let user know lots of time left but remind users that traffic conditions change may be a factor\r\n    //display bestguess time directions and travel time \r\n    if(minsUntilDeparture > 90){\r\n      this.setState({travelInfo: \"Current Travel Time: \" + currentTravelTime});\r\n      this.setState({message: \"Over an hour left until you need to leave based on estimated travel time\"\r\n      + \"and flight departure! However, keep in mind that traffic conditions may change from now until departure.\"});\r\n    }\r\n\r\n     //If < 90 mins and > 30 mins, run pessimistic traffic model search and see if large delays \r\n      //If pessmistic travel time is < 30 mins recommend that user leaves soon\r\n\r\n      //If none of these cases are true, just state # of minutes until recommended departure time \r\n      //display bestguess directions, but BOTH bestguess and pessismistic travel times \r\n    else if(minsUntilDeparture > 30){\r\n      try{\r\n        await axios.get('/time?' + 'origin=' + this.state.homeAddress + '&destination=' + this.state.departureSite + '&trafficMode=pessimistic')\r\n        .then(res => this.setState({worstCaseResult: res.data.directions.routes[0].legs[0]}));\r\n      }\r\n      catch(error){\r\n        console.error('error fetching directions');\r\n      }\r\n\r\n    \r\n      //In case traffic is bad, check worst case traffic to see if user should leave earlier  \r\n\r\n      var worstCaseDuration = moment.duration(this.state.worstCaseResult.duration_in_traffic.value, 'seconds');\r\n      const worstCaseTravelTime = worstCaseDuration.humanize();\r\n\r\n      const estimatedWorstCaseDepartureTime = recommendedAirportArrivalTime.clone().subtract(worstCaseTravelTime, 'minutes');\r\n      const minsUntilWorstCaseDeparture = moment.duration(estimatedWorstCaseDepartureTime.diff(curTime)).asMinutes();\r\n      \r\n\r\n      if(minsUntilWorstCaseDeparture < 30){\r\n        this.setState({travelInfo: \"Current Travel Time: \" + currentTravelTime + \"-\" + worstCaseTravelTime});\r\n        this.setState({message: \"There is heavy traffic currently and your travel time may be much longer \" +\r\n        \"than usual. We recommend that you leave soon.\"});\r\n      }\r\n      else{\r\n        this.setState({travelInfo: \"Current Travel Time: \" + currentTravelTime + \"-\" + worstCaseTravelTime});\r\n        this.setState({message: \"You should not have to leave in the next 30 mins. However keep in mind traffic conditions may change.\"})\r\n      }\r\n    }\r\n\r\n\r\n    //If best guess < 30 mins, let user know that they should leave soon (and display time left) \r\n    //display bestguess time directions and travel time\r\n    else if(minsUntilDeparture > 0){\r\n      this.setState({travelInfo: \"Current Travel Time: \" + currentTravelTime});\r\n      this.setState({message: \"You should leave soon.\"});\r\n    }\r\n\r\n\r\n    //If best guess is negative time (not enough time left until departure)\r\n      //If using minimum arrival gap is positive, tell user they should leave immediately and \r\n    \r\n      //If still negative, add optimistic traffic model and check again...if positive, let user know\r\n      //to leave immediately but they might not make their flight \r\n\r\n      //If all the above added and still negative let user know that they will not be able to make their\r\n      //flight with DeparturePlanner calculations \r\n\r\n      //display optimistic time directions and travel time \r\n    else{\r\n      const latestAirportArrivalTime = flightDepartureTime.clone().subtract(minimumAirportTime, 'minutes');\r\n      const latestNormalDepartureTime = latestAirportArrivalTime.clone().subtract(currentTravelTime, 'minutes');\r\n      const minsUntilLatestNormalDeparture = moment.duration(latestNormalDepartureTime.diff(curTime)).asMinutes();\r\n\r\n      if(minsUntilLatestNormalDeparture > 0){\r\n        this.setState({travelInfo: \"Current Travel Time: \" + currentTravelTime});\r\n        this.setState({message: \"You should leave immediately. Based on our projections, any traffic or airport delays may cause you to miss your flight.\"});\r\n      }\r\n      else{\r\n        try{\r\n          await axios.get('/time?' + 'origin=' + this.state.homeAddress + '&destination=' + this.state.departureSite + '&trafficMode=optimistic')\r\n          .then(res => this.setState({bestCaseResult: res.data.directions.routes[0].legs[0]}));  \r\n        }\r\n        catch(error){\r\n          console.error('error fetching directions');\r\n        }\r\n\r\n        var bestCaseDuration = moment.duration(this.state.bestCaseResult.duration_in_traffic.value, 'seconds');\r\n        const bestCaseTravelTime = bestCaseDuration.humanize();\r\n        const latestAbsoluteDepartureTime = latestAirportArrivalTime.clone().subtract(bestCaseTravelTime, 'minutes');\r\n        const minsUntilLatestAbsoluteDeparture = moment.duration(latestAbsoluteDepartureTime.diff(curTime)).asMinutes();\r\n\r\n        if(minsUntilLatestAbsoluteDeparture > 0){\r\n          this.setState({travelInfo: \"Current Travel Time: \" + bestCaseTravelTime + \"-\" + currentTravelTime});\r\n          this.setState({message: \"We recommend you leave immediately. Based on our projections, any traffic or airport delays may cause you to miss your flight.\"});\r\n        }\r\n        else{\r\n          this.setState({travelInfo: \"Current Travel Time: \" + bestCaseTravelTime +  \"-\" + currentTravelTime});\r\n          this.setState({message: \"According to our calculations, you are most likely unable to make this flight.\"});\r\n        } \r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  render(){\r\n    return(\r\n        <div id=\"main-page\">\r\n          <div className=\"result-header\">\r\n            <p className=\"header-title\">DeparturePlanner</p>\r\n            <p className=\"header-subtext\">Never miss a flight again</p>\r\n\r\n            <div className=\"cur-date\"> Current Time: {\" \" +  \r\n              moment(this.state.curDate).format('MMM Do YYYY, h:mma')}</div>\r\n          </div>\r\n\r\n          <div className=\"new-search-button\">\r\n                <Fab variant=\"extended\" aria-label=\"Delete\">\r\n                <Icon>home</Icon>Home\r\n            </Fab>\r\n          </div>\r\n          <div className=\"result-content\">\r\n            <Grid     container  \r\n                      direction=\"column\"\r\n                      justify=\"center\"\r\n                      alignItems=\"center\"\r\n                      spacing={12}>\r\n\r\n            <Grid item xs={3}>\r\n              <div className=\"travel-info\">\r\n                <p>{this.state.message}</p>\r\n                <p>{this.state.travelInfo}</p> \r\n              </div>\r\n            </Grid>\r\n             <Grid item xs={3}>\r\n              <div className=\"flight-info\">\r\n                <p>Flight Information:</p>\r\n                <p>{this.state.airline}{this.state.flightNum}:  {this.state.departureSite} <Icon className=\"plane-icon\">flight</Icon> {this.state.arrivalSite}</p>\r\n                <p>Departure Time: {this.state.departureTimeStr}</p>\r\n              </div>\r\n            </Grid>\r\n          </Grid>  \r\n          <div className=\"map-pane\">  \r\n            <DirectionsMap\r\n              origin={this.state.homeAddress}\r\n              destination={this.state.departureSite}\r\n              travelMode={\"DRIVING\"}\r\n              googleMapURL={\"https://maps.googleapis.com/maps/api/js?key=\" + this.state.mapsAPI + \"&v=3.exp&libraries=geometry,drawing,places\"}/> \r\n          </div>\r\n        </div> \r\n      </div>\r\n    );\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}