{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\zhang\\\\OneDrive\\\\Documents\\\\Personal Projects\\\\departure-planner\\\\react-backend\\\\client\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\zhang\\\\OneDrive\\\\Documents\\\\Personal Projects\\\\departure-planner\\\\react-backend\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\zhang\\\\OneDrive\\\\Documents\\\\Personal Projects\\\\departure-planner\\\\react-backend\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\zhang\\\\OneDrive\\\\Documents\\\\Personal Projects\\\\departure-planner\\\\react-backend\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\zhang\\\\OneDrive\\\\Documents\\\\Personal Projects\\\\departure-planner\\\\react-backend\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\zhang\\\\OneDrive\\\\Documents\\\\Personal Projects\\\\departure-planner\\\\react-backend\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\zhang\\\\OneDrive\\\\Documents\\\\Personal Projects\\\\departure-planner\\\\react-backend\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\zhang\\\\OneDrive\\\\Documents\\\\Personal Projects\\\\departure-planner\\\\react-backend\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\zhang\\\\OneDrive\\\\Documents\\\\Personal Projects\\\\departure-planner\\\\react-backend\\\\client\\\\src\\\\components\\\\ResultPage.js\";\n\n/* global google */\nimport React, { Component } from 'react';\nimport ReactLoading from 'react-loading';\nimport Header from './Header.js';\nimport DirectionsMap from './DirectionsMap.js';\nimport axios from 'axios';\nimport moment from 'moment';\n\nvar ResultPage =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ResultPage, _Component);\n\n  function ResultPage(props) {\n    var _this;\n\n    _classCallCheck(this, ResultPage);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ResultPage).call(this, props));\n    _this.calculateDepartureTime =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var recommendedAirportTime, minimumAirportTime, flightDepartureDateTime, curTime, recommendedAirportArrivalTime, currentTravelTime, recommendedDepartureTime, minsUntilDeparture, worstCaseTravelTime, estimatedWorstCaseDepartureTime, minsUntilWorstCaseDeparture, latestAirportArrivalTime, latestNormalDepartureTime, minsUntilLatestNormalDeparture, bestCaseTravelTime, latestAbsoluteDepartureTime, minsUntilLatestAbsoluteDeparture;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              //The RECOMMENDED # of minutes to arrive before departure \n              recommendedAirportTime = 120; //The MINIMUM # of minutes to arrive before departure\n\n              minimumAirportTime = 60;\n              flightDepartureDateTime = moment(this.state.departureTime + this.state.departureTimeZone);\n              curTime = moment(); //Wait for this call\n\n              _context.prev = 4;\n              _context.next = 7;\n              return this.getTravelInfo('bestguess');\n\n            case 7:\n              _context.next = 12;\n              break;\n\n            case 9:\n              _context.prev = 9;\n              _context.t0 = _context[\"catch\"](4);\n              console.log(_context.t0);\n\n            case 12:\n              this.setState({\n                directions: this.state.regularCaseResult\n              }); //The recommended air port arrival time \n\n              recommendedAirportArrivalTime = flightDepartureDateTime.subtract(recommendedAirportTime, 'minutes'); //Travel time in minutes \n\n              currentTravelTime = this.state.regularCaseResult.duration.value / 60;\n              recommendedDepartureTime = recommendedAirportArrivalTime.subtract(currentTravelTime, 'minutes'); //See if flight departure time minus recommended arrival gap minus bestguess travel time is < 90 mins\n\n              minsUntilDeparture = moment.duration(recommendedDepartureTime.diff(curTime)).asMinutes(); //If > 90 mins, let user know lots of time left but remind users that traffic conditions change may be a factor\n              //display bestguess time directions and travel time \n\n              if (!(minsUntilDeparture > 90)) {\n                _context.next = 22;\n                break;\n              }\n\n              this.setState({\n                travelInfo: \"Current Travel Time:\" + currentTravelTime + \"Flight Departure Time:\" + flightDepartureDateTime\n              });\n              this.setState({\n                message: \"Over an hour left until you need to leave based on estimated travel time\" + \"and flight departure! However, keep in mind that traffic conditions may change from now until departure.\"\n              });\n              _context.next = 62;\n              break;\n\n            case 22:\n              if (!(minsUntilDeparture > 30)) {\n                _context.next = 37;\n                break;\n              }\n\n              _context.prev = 23;\n              _context.next = 26;\n              return this.getTravelInfo('pessimistic');\n\n            case 26:\n              _context.next = 31;\n              break;\n\n            case 28:\n              _context.prev = 28;\n              _context.t1 = _context[\"catch\"](23);\n              console.error('error fetching directions');\n\n            case 31:\n              //In case traffic is bad, check worst case traffic to see if user should leave earlier  \n              worstCaseTravelTime = this.state.worstCaseResult.duration.value / 60;\n              estimatedWorstCaseDepartureTime = recommendedAirportArrivalTime.subtract(worstCaseTravelTime, 'minutes');\n              minsUntilWorstCaseDeparture = moment.duration(estimatedWorstCaseDepartureTime.diff(curTime)).asMinutes();\n\n              if (minsUntilWorstCaseDeparture < 30) {\n                this.setState({\n                  travelInfo: \"Current Travel Time:\" + currentTravelTime + \"-\" + worstCaseTravelTime + \"Flight Departure Time:\" + flightDepartureDateTime\n                });\n                this.setState({\n                  message: \"There is heavy traffic currently and your travel time may be much longer\" + \"than usual. We recommend that you leave soon.\"\n                });\n              } else {\n                this.setState({\n                  travelInfo: \"Current Travel Time:\" + currentTravelTime + \"-\" + worstCaseTravelTime + \"Flight Departure Time:\" + flightDepartureDateTime\n                });\n                this.setState({\n                  message: \"You should not have to leave in the next 30 mins. However keep in mind traffic conditions may change.\"\n                });\n              }\n\n              _context.next = 62;\n              break;\n\n            case 37:\n              if (!(minsUntilDeparture > 0)) {\n                _context.next = 42;\n                break;\n              }\n\n              this.setState({\n                travelInfo: \"Current Travel Time:\" + currentTravelTime + \"Flight Departure Time:\" + flightDepartureDateTime\n              });\n              this.setState({\n                message: \"You should leave soon.\"\n              });\n              _context.next = 62;\n              break;\n\n            case 42:\n              latestAirportArrivalTime = flightDepartureDateTime.subtract(minimumAirportTime, 'minutes');\n              latestNormalDepartureTime = latestAirportArrivalTime.subtract(currentTravelTime, 'minutes');\n              minsUntilLatestNormalDeparture = moment.duration(latestNormalDepartureTime.diff(curTime)).asMinutes();\n\n              if (!(minsUntilLatestNormalDeparture > 0)) {\n                _context.next = 50;\n                break;\n              }\n\n              this.setState({\n                travelInfo: \"Current Travel Time:\" + currentTravelTime + \"Flight Departure Time:\" + flightDepartureDateTime\n              });\n              this.setState({\n                message: \"You should leave immediately. Any delays at airport may cause you to miss your flight.\"\n              });\n              _context.next = 62;\n              break;\n\n            case 50:\n              _context.prev = 50;\n              _context.next = 53;\n              return this.getTravelInfo('optimistic');\n\n            case 53:\n              _context.next = 58;\n              break;\n\n            case 55:\n              _context.prev = 55;\n              _context.t2 = _context[\"catch\"](50);\n              console.error('error fetching directions');\n\n            case 58:\n              bestCaseTravelTime = this.state.bestCaseResult.duration.value / 60;\n              latestAbsoluteDepartureTime = latestAirportArrivalTime.subtract(bestCaseTravelTime, 'minutes');\n              minsUntilLatestAbsoluteDeparture = moment.duration(latestAbsoluteDepartureTime.diff(curTime)).asMinutes();\n\n              if (minsUntilLatestAbsoluteDeparture > 0) {\n                this.setState({\n                  travelInfo: \"Current Travel Time:\" + bestCaseTravelTime + \"-\" + currentTravelTime + \"Flight Departure Time:\" + flightDepartureDateTime\n                });\n                this.setState({\n                  message: \"We recommend you leave immediately. Based on our projections, any traffic or airport delays may cause you to miss your flight.\"\n                });\n              } else {\n                this.setState({\n                  travelInfo: \"Current Travel Time:\" + bestCaseTravelTime + \"-\" + currentTravelTime + \"Flight Departure Time:\" + flightDepartureDateTime\n                });\n                this.setState({\n                  message: \"According to our calculations, you are most likely unable to make this flight.\"\n                });\n              }\n\n            case 62:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this, [[4, 9], [23, 28], [50, 55]]);\n    }));\n    _this.state = {\n      departureSite: _this.props.location.state.departureSite,\n      arrivalSite: _this.props.location.state.arrivalSite,\n      airline: _this.props.location.state.airline,\n      flightNum: _this.props.location.state.flightNum,\n      flightDate: _this.props.location.state.flightDate,\n      homeAddress: _this.props.location.state.homeAddress,\n      flightExists: null,\n      departureTime: \"2018-12-19T23:50:00\",\n      departureTimeZone: \"-0800\",\n      worstCaseResult: null,\n      regularCaseResult: null,\n      bestCaseResult: null,\n      directions: null,\n      message: \"\",\n      travelInfo: \"\"\n    };\n    _this.searchFlight = _this.searchFlight.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.getDepartureDetails = _this.getDepartureDetails.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.calculateDepartureTime = _this.calculateDepartureTime.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.getTravelInfo = _this.getTravelInfo.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(ResultPage, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var script = document.createElement('script');\n      script.src = \"https://maps.googleapis.com/maps/api/js?key=\" + process.env.REACT_APP_GOOGLE_API_KEY + \"&v=3.exp&libraries=geometry,drawing,places\" + \"&callback=calculateDepartureTime\";\n      document.head.append(script);\n      console.log(this.state); //Must wait for this server call\n      // this.searchFlight();\n      // if(this.state.flightExists === true)\n      //Must wait for this server call\n      // this.calculateDepartureTime();\n    }\n  }, {\n    key: \"searchFlight\",\n    value: function () {\n      var _searchFlight = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var flightSearchKey, proxyurl, init, self;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                flightSearchKey = process.env.REACT_APP_FLIGHT_API_KEY;\n                proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n                init = {\n                  headers: {\n                    \"Ocp-Apim-Subscription-Key\": flightSearchKey\n                  },\n                  params: {\n                    \"Airline\": this.state.airline,\n                    \"FlightNumber\": this.state.flightNum\n                  }\n                };\n                self = this;\n                _context2.next = 6;\n                return axios.get(proxyurl + \"https://flightlookup.azure-api.net/v1/xml/TimeTable/\" + this.state.departureSite + \"/\" + this.state.arrivalSite + \"/\" + this.state.flightDate, init).then(function (response) {\n                  // console.log(response.data);\n                  self.getDepartureDetails(response.data);\n                }).catch(function (error) {\n                  console.log(error);\n                });\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function searchFlight() {\n        return _searchFlight.apply(this, arguments);\n      }\n\n      return searchFlight;\n    }()\n  }, {\n    key: \"getDepartureDetails\",\n    value: function getDepartureDetails(flightData) {\n      var parser = new DOMParser();\n      var xmlDoc = parser.parseFromString(flightData, \"text/xml\");\n\n      if (!xmlDoc.getElementsByTagName(\"Success\").length === 0) {\n        console.log(\"Search Failed!\");\n        this.setState({\n          flightExists: false\n        });\n      } else {\n        var flightDepartureTime = xmlDoc.getElementsByTagName(\"FlightDetails\")[0].getAttribute(\"FLSDepartureDateTime\");\n        var flightDepartureTimeZone = xmlDoc.getElementsByTagName(\"FlightDetails\")[0].getAttribute(\"FLSDepartureTimeOffset\");\n        this.setState({\n          departureTime: flightDepartureTime,\n          departureTimeZone: flightDepartureTimeZone\n        });\n        this.setState({\n          flightExists: true\n        });\n      }\n    }\n  }, {\n    key: \"getTravelInfo\",\n    value: function getTravelInfo(trafficModelStr) {\n      var _this2 = this;\n\n      var travelMode = \"DRIVING\";\n      var drivingOptions = {\n        departureTime: new Date(),\n        trafficModel: trafficModelStr\n      };\n      var DirectionsService = new google.maps.DirectionsService();\n      DirectionsService.route({\n        origin: this.state.homeAddress,\n        destination: this.state.departureSite,\n        travelMode: travelMode,\n        drivingOptions: drivingOptions\n      }, function (result, status) {\n        if (status === google.maps.DirectionsStatus.OK) {\n          console.log(result.routes[0].legs[0]);\n          var resultInfo = result.routes[0].legs[0];\n\n          if (trafficModelStr === 'optimistic') {\n            _this2.setState({\n              bestCaseResult: resultInfo\n            });\n          } else if (trafficModelStr === 'pessimistic') {\n            _this2.setState({\n              worstCaseResult: resultInfo\n            });\n          } else {\n            _this2.setState({\n              regularCaseResult: resultInfo\n            });\n          }\n        } else {\n          console.error(\"error fetching directions \".concat(result));\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 283\n        },\n        __self: this\n      }, React.createElement(Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 284\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 286\n        },\n        __self: this\n      }, this.state.directions !== null && React.createElement(\"div\", {\n        className: \"mapPane\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 288\n        },\n        __self: this\n      }, React.createElement(DirectionsMap, {\n        directions: this.state.directions,\n        origin: this.state.testOrigin,\n        destination: this.state.testDest,\n        travelMode: this.state.travelMode,\n        drivingOptions: this.state.drivingOptions,\n        googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=\" + process.env.REACT_APP_GOOGLE_API_KEY + \"&v=3.exp&libraries=geometry,drawing,places\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 289\n        },\n        __self: this\n      })), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 300\n        },\n        __self: this\n      }, this.state.message), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 301\n        },\n        __self: this\n      }, this.state.travelInfo), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 303\n        },\n        __self: this\n      }, this.state.departureSite), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 304\n        },\n        __self: this\n      }, this.state.arrivalSite), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 305\n        },\n        __self: this\n      }, this.state.airline), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 306\n        },\n        __self: this\n      }, this.state.flightNum), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 307\n        },\n        __self: this\n      }, this.state.departureTime), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 308\n        },\n        __self: this\n      }, this.state.departureTimeZone)));\n    }\n  }]);\n\n  return ResultPage;\n}(Component);\n\nexport { ResultPage as default };","map":{"version":3,"sources":["C:\\Users\\zhang\\OneDrive\\Documents\\Personal Projects\\departure-planner\\react-backend\\client\\src\\components\\ResultPage.js"],"names":["React","Component","ReactLoading","Header","DirectionsMap","axios","moment","ResultPage","props","calculateDepartureTime","recommendedAirportTime","minimumAirportTime","flightDepartureDateTime","state","departureTime","departureTimeZone","curTime","getTravelInfo","console","log","setState","directions","regularCaseResult","recommendedAirportArrivalTime","subtract","currentTravelTime","duration","value","recommendedDepartureTime","minsUntilDeparture","diff","asMinutes","travelInfo","message","error","worstCaseTravelTime","worstCaseResult","estimatedWorstCaseDepartureTime","minsUntilWorstCaseDeparture","latestAirportArrivalTime","latestNormalDepartureTime","minsUntilLatestNormalDeparture","bestCaseTravelTime","bestCaseResult","latestAbsoluteDepartureTime","minsUntilLatestAbsoluteDeparture","departureSite","location","arrivalSite","airline","flightNum","flightDate","homeAddress","flightExists","searchFlight","bind","getDepartureDetails","script","document","createElement","src","process","env","REACT_APP_GOOGLE_API_KEY","head","append","flightSearchKey","REACT_APP_FLIGHT_API_KEY","proxyurl","init","headers","params","self","get","then","response","data","catch","flightData","parser","DOMParser","xmlDoc","parseFromString","getElementsByTagName","length","flightDepartureTime","getAttribute","flightDepartureTimeZone","trafficModelStr","travelMode","drivingOptions","Date","trafficModel","DirectionsService","google","maps","route","origin","destination","result","status","DirectionsStatus","OK","routes","legs","resultInfo","testOrigin","testDest"],"mappings":";;;;;;;;;;AAAA;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,YAAP,MAAyB,eAAzB;AAEA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,aAAP,MAA0B,oBAA1B;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,QAAnB;;IAIqBC,U;;;;;AACnB,sBAAYC,KAAZ,EAAkB;AAAA;;AAAA;;AAChB,oFAAMA,KAAN;AADgB,UA6FlBC,sBA7FkB;AAAA;AAAA;AAAA;AAAA,6BA6FO;AAAA;AAAA;AAAA;AAAA;AAAA;AAGvB;AACMC,cAAAA,sBAJiB,GAIQ,GAJR,EAMvB;;AACMC,cAAAA,kBAPiB,GAOI,EAPJ;AASjBC,cAAAA,uBATiB,GASSN,MAAM,CAAC,KAAKO,KAAL,CAAWC,aAAX,GAA2B,KAAKD,KAAL,CAAWE,iBAAvC,CATf;AAUjBC,cAAAA,OAViB,GAUPV,MAAM,EAVC,EAavB;;AAbuB;AAAA;AAAA,qBAef,KAAKW,aAAL,CAAmB,WAAnB,CAfe;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAkBrBC,cAAAA,OAAO,CAACC,GAAR;;AAlBqB;AAqBvB,mBAAKC,QAAL,CAAc;AAACC,gBAAAA,UAAU,EAAE,KAAKR,KAAL,CAAWS;AAAxB,eAAd,EArBuB,CA0BvB;;AACMC,cAAAA,6BA3BiB,GA2BeX,uBAAuB,CAACY,QAAxB,CAAiCd,sBAAjC,EAAyD,SAAzD,CA3Bf,EA8BvB;;AACMe,cAAAA,iBA/BiB,GA+BG,KAAKZ,KAAL,CAAWS,iBAAX,CAA6BI,QAA7B,CAAsCC,KAAtC,GAA4C,EA/B/C;AAiCjBC,cAAAA,wBAjCiB,GAiCWL,6BAA6B,CAACC,QAA9B,CAAuCC,iBAAvC,EAA0D,SAA1D,CAjCX,EAoCvB;;AACMI,cAAAA,kBArCiB,GAqCIvB,MAAM,CAACoB,QAAP,CAAgBE,wBAAwB,CAACE,IAAzB,CAA8Bd,OAA9B,CAAhB,EAAwDe,SAAxD,EArCJ,EAyCvB;AACA;;AA1CuB,oBA2CpBF,kBAAkB,GAAG,EA3CD;AAAA;AAAA;AAAA;;AA4CrB,mBAAKT,QAAL,CAAc;AAACY,gBAAAA,UAAU,EAAE,yBAAyBP,iBAAzB,GAA6C,wBAA7C,GAAwEb;AAArF,eAAd;AACA,mBAAKQ,QAAL,CAAc;AAACa,gBAAAA,OAAO,EAAE,6EACtB;AADY,eAAd;AA7CqB;AAAA;;AAAA;AAAA,oBAsDfJ,kBAAkB,GAAG,EAtDN;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,qBA0Db,KAAKZ,aAAL,CAAmB,aAAnB,CA1Da;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA6DnBC,cAAAA,OAAO,CAACgB,KAAR,CAAc,2BAAd;;AA7DmB;AAiErB;AACMC,cAAAA,mBAlEe,GAkEO,KAAKtB,KAAL,CAAWuB,eAAX,CAA2BV,QAA3B,CAAoCC,KAApC,GAA0C,EAlEjD;AAoEfU,cAAAA,+BApEe,GAoEmBd,6BAA6B,CAACC,QAA9B,CAAuCW,mBAAvC,EAA4D,SAA5D,CApEnB;AAqEfG,cAAAA,2BArEe,GAqEehC,MAAM,CAACoB,QAAP,CAAgBW,+BAA+B,CAACP,IAAhC,CAAqCd,OAArC,CAAhB,EAA+De,SAA/D,EArEf;;AAwErB,kBAAGO,2BAA2B,GAAG,EAAjC,EAAoC;AAClC,qBAAKlB,QAAL,CAAc;AAACY,kBAAAA,UAAU,EAAE,yBAAyBP,iBAAzB,GAA6C,GAA7C,GAAmDU,mBAAnD,GAAyE,wBAAzE,GAAoGvB;AAAjH,iBAAd;AACA,qBAAKQ,QAAL,CAAc;AAACa,kBAAAA,OAAO,EAAE,6EACxB;AADc,iBAAd;AAED,eAJD,MAKI;AACF,qBAAKb,QAAL,CAAc;AAACY,kBAAAA,UAAU,EAAE,yBAAyBP,iBAAzB,GAA6C,GAA7C,GAAmDU,mBAAnD,GAAyE,wBAAzE,GAAoGvB;AAAjH,iBAAd;AACA,qBAAKQ,QAAL,CAAc;AAACa,kBAAAA,OAAO,EAAE;AAAV,iBAAd;AACD;;AAhFoB;AAAA;;AAAA;AAAA,oBAsFfJ,kBAAkB,GAAG,CAtFN;AAAA;AAAA;AAAA;;AAuFrB,mBAAKT,QAAL,CAAc;AAACY,gBAAAA,UAAU,EAAE,yBAAyBP,iBAAzB,GAA6C,wBAA7C,GAAwEb;AAArF,eAAd;AACA,mBAAKQ,QAAL,CAAc;AAACa,gBAAAA,OAAO,EAAE;AAAV,eAAd;AAxFqB;AAAA;;AAAA;AAuGfM,cAAAA,wBAvGe,GAuGY3B,uBAAuB,CAACY,QAAxB,CAAiCb,kBAAjC,EAAqD,SAArD,CAvGZ;AAwGf6B,cAAAA,yBAxGe,GAwGaD,wBAAwB,CAACf,QAAzB,CAAkCC,iBAAlC,EAAqD,SAArD,CAxGb;AAyGfgB,cAAAA,8BAzGe,GAyGkBnC,MAAM,CAACoB,QAAP,CAAgBc,yBAAyB,CAACV,IAA1B,CAA+Bd,OAA/B,CAAhB,EAAyDe,SAAzD,EAzGlB;;AAAA,oBA2GlBU,8BAA8B,GAAG,CA3Gf;AAAA;AAAA;AAAA;;AA4GnB,mBAAKrB,QAAL,CAAc;AAACY,gBAAAA,UAAU,EAAE,yBAAyBP,iBAAzB,GAA6C,wBAA7C,GAAwEb;AAArF,eAAd;AACA,mBAAKQ,QAAL,CAAc;AAACa,gBAAAA,OAAO,EAAE;AAAV,eAAd;AA7GmB;AAAA;;AAAA;AAAA;AAAA;AAAA,qBAkHX,KAAKhB,aAAL,CAAmB,YAAnB,CAlHW;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAqHjBC,cAAAA,OAAO,CAACgB,KAAR,CAAc,2BAAd;;AArHiB;AAwHbQ,cAAAA,kBAxHa,GAwHQ,KAAK7B,KAAL,CAAW8B,cAAX,CAA0BjB,QAA1B,CAAmCC,KAAnC,GAAyC,EAxHjD;AAyHbiB,cAAAA,2BAzHa,GAyHiBL,wBAAwB,CAACf,QAAzB,CAAkCkB,kBAAlC,EAAsD,SAAtD,CAzHjB;AA0HbG,cAAAA,gCA1Ha,GA0HsBvC,MAAM,CAACoB,QAAP,CAAgBkB,2BAA2B,CAACd,IAA5B,CAAiCd,OAAjC,CAAhB,EAA2De,SAA3D,EA1HtB;;AA4HnB,kBAAGc,gCAAgC,GAAG,CAAtC,EAAwC;AACtC,qBAAKzB,QAAL,CAAc;AAACY,kBAAAA,UAAU,EAAE,yBAAyBU,kBAAzB,GAA8C,GAA9C,GAAoDjB,iBAApD,GAAwE,wBAAxE,GAAmGb;AAAhH,iBAAd;AACA,qBAAKQ,QAAL,CAAc;AAACa,kBAAAA,OAAO,EAAE;AAAV,iBAAd;AACD,eAHD,MAII;AACF,qBAAKb,QAAL,CAAc;AAACY,kBAAAA,UAAU,EAAE,yBAAyBU,kBAAzB,GAA+C,GAA/C,GAAqDjB,iBAArD,GAAyE,wBAAzE,GAAoGb;AAAjH,iBAAd;AACA,qBAAKQ,QAAL,CAAc;AAACa,kBAAAA,OAAO,EAAE;AAAV,iBAAd;AACD;;AAnIkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA7FP;AAEhB,UAAKpB,KAAL,GAAa;AACXiC,MAAAA,aAAa,EAAE,MAAKtC,KAAL,CAAWuC,QAAX,CAAoBlC,KAApB,CAA0BiC,aAD9B;AAEXE,MAAAA,WAAW,EAAE,MAAKxC,KAAL,CAAWuC,QAAX,CAAoBlC,KAApB,CAA0BmC,WAF5B;AAGXC,MAAAA,OAAO,EAAE,MAAKzC,KAAL,CAAWuC,QAAX,CAAoBlC,KAApB,CAA0BoC,OAHxB;AAIXC,MAAAA,SAAS,EAAE,MAAK1C,KAAL,CAAWuC,QAAX,CAAoBlC,KAApB,CAA0BqC,SAJ1B;AAKXC,MAAAA,UAAU,EAAE,MAAK3C,KAAL,CAAWuC,QAAX,CAAoBlC,KAApB,CAA0BsC,UAL3B;AAMXC,MAAAA,WAAW,EAAE,MAAK5C,KAAL,CAAWuC,QAAX,CAAoBlC,KAApB,CAA0BuC,WAN5B;AASXC,MAAAA,YAAY,EAAE,IATH;AAWXvC,MAAAA,aAAa,EAAE,qBAXJ;AAYXC,MAAAA,iBAAiB,EAAE,OAZR;AAcXqB,MAAAA,eAAe,EAAE,IAdN;AAeXd,MAAAA,iBAAiB,EAAE,IAfR;AAgBXqB,MAAAA,cAAc,EAAE,IAhBL;AAiBXtB,MAAAA,UAAU,EAAE,IAjBD;AAmBXY,MAAAA,OAAO,EAAE,EAnBE;AAoBXD,MAAAA,UAAU,EAAE;AApBD,KAAb;AAuBA,UAAKsB,YAAL,GAAoB,MAAKA,YAAL,CAAkBC,IAAlB,uDAApB;AACA,UAAKC,mBAAL,GAA2B,MAAKA,mBAAL,CAAyBD,IAAzB,uDAA3B;AACA,UAAK9C,sBAAL,GAA8B,MAAKA,sBAAL,CAA4B8C,IAA5B,uDAA9B;AACA,UAAKtC,aAAL,GAAqB,MAAKA,aAAL,CAAmBsC,IAAnB,uDAArB;AA5BgB;AA6BjB;;;;wCAEkB;AACf,UAAME,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAf;AACAF,MAAAA,MAAM,CAACG,GAAP,GAAa,iDAAiDC,OAAO,CAACC,GAAR,CAAYC,wBAA7D,GAAwF,4CAAxF,GACX,kCADF;AAEAL,MAAAA,QAAQ,CAACM,IAAT,CAAcC,MAAd,CAAqBR,MAArB;AAEAvC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKN,KAAjB,EANe,CAQf;AACA;AAEA;AACE;AACA;AAEL;;;;;;;;;;;;AAIOqD,gBAAAA,e,GAAkBL,OAAO,CAACC,GAAR,CAAYK,wB;AAC9BC,gBAAAA,Q,GAAW,sC;AACXC,gBAAAA,I,GAAO;AACXC,kBAAAA,OAAO,EAAE;AACP,iDAA6BJ;AADtB,mBADE;AAIXK,kBAAAA,MAAM,EAAE;AACN,+BAAW,KAAK1D,KAAL,CAAWoC,OADhB;AAEN,oCAAgB,KAAKpC,KAAL,CAAWqC;AAFrB;AAJG,iB;AASTsB,gBAAAA,I,GAAO,I;;uBACLnE,KAAK,CAACoE,GAAN,CAAUL,QAAQ,GAAG,sDAAX,GACd,KAAKvD,KAAL,CAAWiC,aADG,GACa,GADb,GACmB,KAAKjC,KAAL,CAAWmC,WAD9B,GAC4C,GAD5C,GAEd,KAAKnC,KAAL,CAAWsC,UAFP,EAEmBkB,IAFnB,EAGLK,IAHK,CAGA,UAAUC,QAAV,EAAoB;AACxB;AACAH,kBAAAA,IAAI,CAAChB,mBAAL,CAAyBmB,QAAQ,CAACC,IAAlC;AACD,iBANK,EAOLC,KAPK,CAOC,UAAU3C,KAAV,EAAiB;AACtBhB,kBAAAA,OAAO,CAACC,GAAR,CAAYe,KAAZ;AACD,iBATK,C;;;;;;;;;;;;;;;;;;wCAYY4C,U,EAAW;AAC7B,UAAIC,MAAM,GAAG,IAAIC,SAAJ,EAAb;AACA,UAAIC,MAAM,GAAGF,MAAM,CAACG,eAAP,CAAuBJ,UAAvB,EAAkC,UAAlC,CAAb;;AAGA,UAAG,CAACG,MAAM,CAACE,oBAAP,CAA4B,SAA5B,EAAuCC,MAAxC,KAAmD,CAAtD,EAAwD;AACtDlE,QAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACA,aAAKC,QAAL,CAAc;AAACiC,UAAAA,YAAY,EAAE;AAAf,SAAd;AACD,OAHD,MAKI;AACF,YAAIgC,mBAAmB,GAAGJ,MAAM,CAACE,oBAAP,CAA4B,eAA5B,EAA6C,CAA7C,EAAgDG,YAAhD,CAA6D,sBAA7D,CAA1B;AACA,YAAIC,uBAAuB,GAAGN,MAAM,CAACE,oBAAP,CAA4B,eAA5B,EAA6C,CAA7C,EAAgDG,YAAhD,CAA6D,wBAA7D,CAA9B;AAEA,aAAKlE,QAAL,CAAc;AAACN,UAAAA,aAAa,EAAEuE,mBAAhB;AAAqCtE,UAAAA,iBAAiB,EAAEwE;AAAxD,SAAd;AACA,aAAKnE,QAAL,CAAc;AAACiC,UAAAA,YAAY,EAAE;AAAf,SAAd;AACD;AACF;;;kCA2IamC,e,EAAgB;AAAA;;AAC5B,UAAMC,UAAU,GAAI,SAApB;AACA,UAAMC,cAAc,GAAG;AACrB5E,QAAAA,aAAa,EAAE,IAAI6E,IAAJ,EADM;AAErBC,QAAAA,YAAY,EAAEJ;AAFO,OAAvB;AAKA,UAAMK,iBAAiB,GAAG,IAAIC,MAAM,CAACC,IAAP,CAAYF,iBAAhB,EAA1B;AACAA,MAAAA,iBAAiB,CAACG,KAAlB,CAAwB;AACtBC,QAAAA,MAAM,EAAE,KAAKpF,KAAL,CAAWuC,WADG;AAEtB8C,QAAAA,WAAW,EAAE,KAAKrF,KAAL,CAAWiC,aAFF;AAGtB2C,QAAAA,UAAU,EAAEA,UAHU;AAItBC,QAAAA,cAAc,EAAEA;AAJM,OAAxB,EAME,UAACS,MAAD,EAASC,MAAT,EAAoB;AAEpB,YAAIA,MAAM,KAAKN,MAAM,CAACC,IAAP,CAAYM,gBAAZ,CAA6BC,EAA5C,EAAgD;AAC9CpF,UAAAA,OAAO,CAACC,GAAR,CAAYgF,MAAM,CAACI,MAAP,CAAc,CAAd,EAAiBC,IAAjB,CAAsB,CAAtB,CAAZ;AACA,cAAMC,UAAU,GAAGN,MAAM,CAACI,MAAP,CAAc,CAAd,EAAiBC,IAAjB,CAAsB,CAAtB,CAAnB;;AAEA,cAAGhB,eAAe,KAAK,YAAvB,EAAoC;AAClC,YAAA,MAAI,CAACpE,QAAL,CAAc;AAACuB,cAAAA,cAAc,EAAE8D;AAAjB,aAAd;AACD,WAFD,MAGK,IAAGjB,eAAe,KAAK,aAAvB,EAAqC;AACxC,YAAA,MAAI,CAACpE,QAAL,CAAc;AAACgB,cAAAA,eAAe,EAAEqE;AAAlB,aAAd;AACD,WAFI,MAGD;AACF,YAAA,MAAI,CAACrF,QAAL,CAAc;AAACE,cAAAA,iBAAiB,EAAEmF;AAApB,aAAd;AACD;AACF,SAbD,MAaO;AACLvF,UAAAA,OAAO,CAACgB,KAAR,qCAA2CiE,MAA3C;AACD;AACF,OAxBD;AAyBD;;;6BAGO;AACN,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKtF,KAAL,CAAWQ,UAAX,KAA0B,IAA1B,IACD;AAAK,QAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,aAAD;AACE,QAAA,UAAU,EAAE,KAAKR,KAAL,CAAWQ,UADzB;AAEE,QAAA,MAAM,EAAE,KAAKR,KAAL,CAAW6F,UAFrB;AAGE,QAAA,WAAW,EAAE,KAAK7F,KAAL,CAAW8F,QAH1B;AAIE,QAAA,UAAU,EAAE,KAAK9F,KAAL,CAAW4E,UAJzB;AAKE,QAAA,cAAc,EAAE,KAAK5E,KAAL,CAAW6E,cAL7B;AAME,QAAA,YAAY,EAAE,iDAAiD7B,OAAO,CAACC,GAAR,CAAYC,wBAA7D,GAAwF,4CANxG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CAFF,EAcE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAI,KAAKlD,KAAL,CAAWoB,OAAf,CAdF,EAeE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAI,KAAKpB,KAAL,CAAWmB,UAAf,CAfF,EAiBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAI,KAAKnB,KAAL,CAAWiC,aAAf,CAjBF,EAkBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAI,KAAKjC,KAAL,CAAWmC,WAAf,CAlBF,EAmBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAI,KAAKnC,KAAL,CAAWoC,OAAf,CAnBF,EAoBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAI,KAAKpC,KAAL,CAAWqC,SAAf,CApBF,EAqBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAI,KAAKrC,KAAL,CAAWC,aAAf,CArBF,EAsBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAI,KAAKD,KAAL,CAAWE,iBAAf,CAtBF,CAHJ,CADF;AA8BD;;;;EA1SqCd,S;;SAAnBM,U","sourcesContent":["/* global google */\r\n\r\nimport React, { Component } from 'react';\r\nimport ReactLoading from 'react-loading';\r\n\r\nimport Header from './Header.js';\r\nimport DirectionsMap from './DirectionsMap.js'\r\n\r\nimport axios from 'axios'\r\nimport moment from 'moment'\r\n\r\n\r\n\r\nexport default class ResultPage extends Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      departureSite: this.props.location.state.departureSite,\r\n      arrivalSite: this.props.location.state.arrivalSite,\r\n      airline: this.props.location.state.airline,\r\n      flightNum: this.props.location.state.flightNum,\r\n      flightDate: this.props.location.state.flightDate,\r\n      homeAddress: this.props.location.state.homeAddress,\r\n\r\n\r\n      flightExists: null,\r\n\r\n      departureTime: \"2018-12-19T23:50:00\",\r\n      departureTimeZone: \"-0800\",\r\n\r\n      worstCaseResult: null,\r\n      regularCaseResult: null,\r\n      bestCaseResult: null,\r\n      directions: null,\r\n\r\n      message: \"\",\r\n      travelInfo: \"\",\r\n    }\r\n\r\n    this.searchFlight = this.searchFlight.bind(this);\r\n    this.getDepartureDetails = this.getDepartureDetails.bind(this);\r\n    this.calculateDepartureTime = this.calculateDepartureTime.bind(this);\r\n    this.getTravelInfo = this.getTravelInfo.bind(this);\r\n  }\r\n\r\n  componentDidMount(){\r\n      const script = document.createElement('script');\r\n      script.src = \"https://maps.googleapis.com/maps/api/js?key=\" + process.env.REACT_APP_GOOGLE_API_KEY + \"&v=3.exp&libraries=geometry,drawing,places\" \r\n      + \"&callback=calculateDepartureTime\";\r\n      document.head.append(script);\r\n\r\n      console.log(this.state);\r\n\r\n      //Must wait for this server call\r\n      // this.searchFlight();\r\n\r\n      // if(this.state.flightExists === true)\r\n        //Must wait for this server call\r\n        // this.calculateDepartureTime();\r\n      \r\n  }\r\n\r\n\r\n  async searchFlight(){\r\n    const flightSearchKey = process.env.REACT_APP_FLIGHT_API_KEY;\r\n    const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\r\n    const init = {\r\n      headers: {\r\n        \"Ocp-Apim-Subscription-Key\": flightSearchKey\r\n      },\r\n      params: {\r\n        \"Airline\": this.state.airline,\r\n        \"FlightNumber\": this.state.flightNum,\r\n      }\r\n    }\r\n    var self = this;\r\n    await axios.get(proxyurl + \"https://flightlookup.azure-api.net/v1/xml/TimeTable/\" \r\n    + this.state.departureSite + \"/\" + this.state.arrivalSite + \"/\" \r\n    + this.state.flightDate, init)\r\n    .then(function (response) {\r\n      // console.log(response.data);\r\n      self.getDepartureDetails(response.data);      \r\n    })\r\n    .catch(function (error) {\r\n      console.log(error);\r\n    });\r\n  }\r\n\r\n  getDepartureDetails(flightData){\r\n    var parser = new DOMParser();\r\n    var xmlDoc = parser.parseFromString(flightData,\"text/xml\");\r\n    \r\n   \r\n    if(!xmlDoc.getElementsByTagName(\"Success\").length === 0){\r\n      console.log(\"Search Failed!\");\r\n      this.setState({flightExists: false});\r\n    }\r\n\r\n    else{\r\n      var flightDepartureTime = xmlDoc.getElementsByTagName(\"FlightDetails\")[0].getAttribute(\"FLSDepartureDateTime\");\r\n      var flightDepartureTimeZone = xmlDoc.getElementsByTagName(\"FlightDetails\")[0].getAttribute(\"FLSDepartureTimeOffset\");\r\n\r\n      this.setState({departureTime: flightDepartureTime, departureTimeZone: flightDepartureTimeZone});\r\n      this.setState({flightExists: true});\r\n    }\r\n  }\r\n\r\n  calculateDepartureTime = async function(){\r\n\r\n\r\n    //The RECOMMENDED # of minutes to arrive before departure \r\n    const recommendedAirportTime = 120;\r\n\r\n    //The MINIMUM # of minutes to arrive before departure\r\n    const minimumAirportTime = 60;\r\n\r\n    const flightDepartureDateTime = moment(this.state.departureTime + this.state.departureTimeZone);\r\n    const curTime = moment();\r\n    \r\n\r\n    //Wait for this call\r\n    try{\r\n      await this.getTravelInfo('bestguess');\r\n    }\r\n    catch(error){\r\n      console.log(error);\r\n    }\r\n\r\n    this.setState({directions: this.state.regularCaseResult});\r\n\r\n\r\n\r\n\r\n    //The recommended air port arrival time \r\n    const recommendedAirportArrivalTime = flightDepartureDateTime.subtract(recommendedAirportTime, 'minutes');\r\n\r\n\r\n    //Travel time in minutes \r\n    const currentTravelTime = this.state.regularCaseResult.duration.value/60;\r\n\r\n    const recommendedDepartureTime =  recommendedAirportArrivalTime.subtract(currentTravelTime, 'minutes');\r\n\r\n\r\n    //See if flight departure time minus recommended arrival gap minus bestguess travel time is < 90 mins\r\n    const minsUntilDeparture = moment.duration(recommendedDepartureTime.diff(curTime)).asMinutes(); \r\n\r\n\r\n\r\n    //If > 90 mins, let user know lots of time left but remind users that traffic conditions change may be a factor\r\n    //display bestguess time directions and travel time \r\n    if(minsUntilDeparture > 90){\r\n      this.setState({travelInfo: \"Current Travel Time:\" + currentTravelTime + \"Flight Departure Time:\" + flightDepartureDateTime});\r\n      this.setState({message: \"Over an hour left until you need to leave based on estimated travel time\"\r\n      + \"and flight departure! However, keep in mind that traffic conditions may change from now until departure.\"});\r\n    }\r\n\r\n     //If < 90 mins and > 30 mins, run pessimistic traffic model search and see if large delays \r\n      //If pessmistic travel time is < 30 mins recommend that user leaves soon\r\n\r\n      //If none of these cases are true, just state # of minutes until recommended departure time \r\n      //display bestguess directions, but BOTH bestguess and pessismistic travel times \r\n    else if(minsUntilDeparture > 30){\r\n\r\n      //Must wait for this call \r\n      try{\r\n        await this.getTravelInfo('pessimistic');\r\n      }\r\n      catch(error){\r\n        console.error('error fetching directions');\r\n      }\r\n      \r\n\r\n      //In case traffic is bad, check worst case traffic to see if user should leave earlier  \r\n      const worstCaseTravelTime = this.state.worstCaseResult.duration.value/60;\r\n\r\n      const estimatedWorstCaseDepartureTime = recommendedAirportArrivalTime.subtract(worstCaseTravelTime, 'minutes');\r\n      const minsUntilWorstCaseDeparture = moment.duration(estimatedWorstCaseDepartureTime.diff(curTime)).asMinutes();\r\n      \r\n\r\n      if(minsUntilWorstCaseDeparture < 30){\r\n        this.setState({travelInfo: \"Current Travel Time:\" + currentTravelTime + \"-\" + worstCaseTravelTime + \"Flight Departure Time:\" + flightDepartureDateTime});\r\n        this.setState({message: \"There is heavy traffic currently and your travel time may be much longer\" +\r\n        \"than usual. We recommend that you leave soon.\"});\r\n      }\r\n      else{\r\n        this.setState({travelInfo: \"Current Travel Time:\" + currentTravelTime + \"-\" + worstCaseTravelTime + \"Flight Departure Time:\" + flightDepartureDateTime});\r\n        this.setState({message: \"You should not have to leave in the next 30 mins. However keep in mind traffic conditions may change.\"})\r\n      }\r\n    }\r\n\r\n\r\n    //If best guess < 30 mins, let user know that they should leave soon (and display time left) \r\n    //display bestguess time directions and travel time\r\n    else if(minsUntilDeparture > 0){\r\n      this.setState({travelInfo: \"Current Travel Time:\" + currentTravelTime + \"Flight Departure Time:\" + flightDepartureDateTime});\r\n      this.setState({message: \"You should leave soon.\"});\r\n    }\r\n\r\n\r\n    //If best guess is negative time (not enough time left until departure)\r\n      //If using minimum arrival gap is positive, tell user they should leave immediately and \r\n    \r\n      //If still negative, add optimistic traffic model and check again...if positive, let user know\r\n      //to leave immediately but they might not make their flight \r\n\r\n      //If all the above added and still negative let user know that they will not be able to make their\r\n      //flight with DeparturePlanner calculations \r\n\r\n      //display optimistic time directions and travel time \r\n    else{\r\n      const latestAirportArrivalTime = flightDepartureDateTime.subtract(minimumAirportTime, 'minutes');\r\n      const latestNormalDepartureTime = latestAirportArrivalTime.subtract(currentTravelTime, 'minutes');\r\n      const minsUntilLatestNormalDeparture = moment.duration(latestNormalDepartureTime.diff(curTime)).asMinutes();\r\n\r\n      if(minsUntilLatestNormalDeparture > 0){\r\n        this.setState({travelInfo: \"Current Travel Time:\" + currentTravelTime + \"Flight Departure Time:\" + flightDepartureDateTime});\r\n        this.setState({message: \"You should leave immediately. Any delays at airport may cause you to miss your flight.\"});\r\n      }\r\n      else{\r\n        //Must wait for this call \r\n        try{\r\n          await this.getTravelInfo('optimistic');\r\n        }\r\n        catch(error){\r\n          console.error('error fetching directions');\r\n        }\r\n\r\n        const bestCaseTravelTime = this.state.bestCaseResult.duration.value/60;\r\n        const latestAbsoluteDepartureTime = latestAirportArrivalTime.subtract(bestCaseTravelTime, 'minutes');\r\n        const minsUntilLatestAbsoluteDeparture = moment.duration(latestAbsoluteDepartureTime.diff(curTime)).asMinutes();\r\n\r\n        if(minsUntilLatestAbsoluteDeparture > 0){\r\n          this.setState({travelInfo: \"Current Travel Time:\" + bestCaseTravelTime + \"-\" + currentTravelTime + \"Flight Departure Time:\" + flightDepartureDateTime});\r\n          this.setState({message: \"We recommend you leave immediately. Based on our projections, any traffic or airport delays may cause you to miss your flight.\"});\r\n        }\r\n        else{\r\n          this.setState({travelInfo: \"Current Travel Time:\" + bestCaseTravelTime +  \"-\" + currentTravelTime + \"Flight Departure Time:\" + flightDepartureDateTime});\r\n          this.setState({message: \"According to our calculations, you are most likely unable to make this flight.\"});\r\n        } \r\n      }\r\n    }\r\n  }\r\n\r\n  \r\n  getTravelInfo(trafficModelStr){\r\n    const travelMode =  \"DRIVING\";\r\n    const drivingOptions = {\r\n      departureTime: new Date(),\r\n      trafficModel: trafficModelStr\r\n    };\r\n\r\n    const DirectionsService = new google.maps.DirectionsService();\r\n    DirectionsService.route({\r\n      origin: this.state.homeAddress,\r\n      destination: this.state.departureSite,\r\n      travelMode: travelMode,\r\n      drivingOptions: drivingOptions}, \r\n      \r\n      (result, status) => {\r\n\r\n      if (status === google.maps.DirectionsStatus.OK) {\r\n        console.log(result.routes[0].legs[0]);\r\n        const resultInfo = result.routes[0].legs[0];\r\n\r\n        if(trafficModelStr === 'optimistic'){\r\n          this.setState({bestCaseResult: resultInfo});\r\n        }\r\n        else if(trafficModelStr === 'pessimistic'){\r\n          this.setState({worstCaseResult: resultInfo,});\r\n        }\r\n        else{\r\n          this.setState({regularCaseResult: resultInfo});\r\n        }\r\n      } else {\r\n        console.error(`error fetching directions ${result}`);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  render(){\r\n    return(\r\n      <div>\r\n        <Header>\r\n        </Header>\r\n          <div>\r\n            {this.state.directions !== null && \r\n            <div className=\"mapPane\">        \r\n              <DirectionsMap\r\n                directions={this.state.directions}\r\n                origin={this.state.testOrigin} \r\n                destination={this.state.testDest} \r\n                travelMode={this.state.travelMode} \r\n                drivingOptions={this.state.drivingOptions}\r\n                googleMapURL={\"https://maps.googleapis.com/maps/api/js?key=\" + process.env.REACT_APP_GOOGLE_API_KEY + \"&v=3.exp&libraries=geometry,drawing,places\"}\r\n                /> \r\n            </div>\r\n            }\r\n\r\n            <p>{this.state.message}</p>\r\n            <p>{this.state.travelInfo}</p>\r\n\r\n            <p>{this.state.departureSite}</p>\r\n            <p>{this.state.arrivalSite}</p>\r\n            <p>{this.state.airline}</p>\r\n            <p>{this.state.flightNum}</p>\r\n            <p>{this.state.departureTime}</p>\r\n            <p>{this.state.departureTimeZone}</p>\r\n          </div>\r\n    </div>\r\n    );\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}