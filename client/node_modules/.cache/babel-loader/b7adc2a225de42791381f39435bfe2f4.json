{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\zhang\\\\OneDrive\\\\Documents\\\\Personal Projects\\\\departure-planner\\\\react-backend\\\\client\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\zhang\\\\OneDrive\\\\Documents\\\\Personal Projects\\\\departure-planner\\\\react-backend\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\zhang\\\\OneDrive\\\\Documents\\\\Personal Projects\\\\departure-planner\\\\react-backend\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\zhang\\\\OneDrive\\\\Documents\\\\Personal Projects\\\\departure-planner\\\\react-backend\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\zhang\\\\OneDrive\\\\Documents\\\\Personal Projects\\\\departure-planner\\\\react-backend\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\zhang\\\\OneDrive\\\\Documents\\\\Personal Projects\\\\departure-planner\\\\react-backend\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\zhang\\\\OneDrive\\\\Documents\\\\Personal Projects\\\\departure-planner\\\\react-backend\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\zhang\\\\OneDrive\\\\Documents\\\\Personal Projects\\\\departure-planner\\\\react-backend\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\zhang\\\\OneDrive\\\\Documents\\\\Personal Projects\\\\departure-planner\\\\react-backend\\\\client\\\\src\\\\components\\\\ResultPage.js\";\n\n/* global google */\nimport React, { Component } from 'react';\nimport ReactLoading from 'react-loading';\nimport Header from './Header.js';\nimport DirectionsMap from './DirectionsMap.js';\nimport axios from 'axios';\nimport moment from 'moment';\n\nvar ResultPage =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ResultPage, _Component);\n\n  function ResultPage(props) {\n    var _this;\n\n    _classCallCheck(this, ResultPage);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ResultPage).call(this, props));\n    _this.state = {\n      departureSite: _this.props.location.state.departureSite,\n      arrivalSite: _this.props.location.state.arrivalSite,\n      airline: _this.props.location.state.airline,\n      flightNum: _this.props.location.state.flightNum,\n      flightDate: _this.props.location.state.flightDate,\n      homeAddress: _this.props.location.state.homeAddress,\n      mapsAPI: \"\",\n      flightExists: null,\n      departureTime: \"2018-12-19T19:50:00\",\n      departureTimeZone: \"-0800\",\n      worstCaseResult: null,\n      regularCaseResult: null,\n      bestCaseResult: null,\n      directions: null,\n      message: \"\",\n      travelInfo: \"\"\n    };\n    _this.searchFlight = _this.searchFlight.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.getDepartureDetails = _this.getDepartureDetails.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.calculateDepartureTime = _this.calculateDepartureTime.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.getTravelInfo = _this.getTravelInfo.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(ResultPage, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      console.log(this.state);\n      var apiKey = process.env.REACT_APP_GOOGLE_API_KEY;\n      this.setState({\n        mapsAPI: apiKey\n      }); //Must wait for this server call\n      //  this.searchFlight();\n\n      if (this.state.flightExists === true) //Must wait for this server call\n        this.calculateDepartureTime();\n    }\n  }, {\n    key: \"searchFlight\",\n    value: function () {\n      var _searchFlight = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var flightSearchKey, proxyurl, init, self;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                flightSearchKey = process.env.REACT_APP_FLIGHT_API_KEY;\n                proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n                init = {\n                  headers: {\n                    \"Ocp-Apim-Subscription-Key\": flightSearchKey\n                  },\n                  params: {\n                    \"Airline\": this.state.airline,\n                    \"FlightNumber\": this.state.flightNum\n                  }\n                };\n                self = this;\n                _context.next = 6;\n                return axios.get(proxyurl + \"https://flightlookup.azure-api.net/v1/xml/TimeTable/\" + this.state.departureSite + \"/\" + this.state.arrivalSite + \"/\" + this.state.flightDate, init).then(function (response) {\n                  // console.log(response.data);\n                  self.getDepartureDetails(response.data);\n                }).catch(function (error) {\n                  console.log(error);\n                });\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function searchFlight() {\n        return _searchFlight.apply(this, arguments);\n      }\n\n      return searchFlight;\n    }()\n  }, {\n    key: \"getDepartureDetails\",\n    value: function getDepartureDetails(flightData) {\n      var parser = new DOMParser();\n      var xmlDoc = parser.parseFromString(flightData, \"text/xml\");\n\n      if (!xmlDoc.getElementsByTagName(\"Success\").length === 0) {\n        console.log(\"Search Failed!\");\n        this.setState({\n          flightExists: false\n        });\n      } else {\n        var flightDepartureTime = xmlDoc.getElementsByTagName(\"FlightDetails\")[0].getAttribute(\"FLSDepartureDateTime\");\n        var flightDepartureTimeZone = xmlDoc.getElementsByTagName(\"FlightDetails\")[0].getAttribute(\"FLSDepartureTimeOffset\");\n        this.setState({\n          departureTime: flightDepartureTime,\n          departureTimeZone: flightDepartureTimeZone\n        });\n        this.setState({\n          flightExists: true\n        });\n      }\n    }\n  }, {\n    key: \"calculateDepartureTime\",\n    value: function () {\n      var _calculateDepartureTime = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var recommendedAirportTime, minimumAirportTime, flightDepartureDateTime, curTime, recommendedAirportArrivalTime, currentTravelTime, recommendedDepartureTime, minsUntilDeparture, worstCaseTravelTime, estimatedWorstCaseDepartureTime, minsUntilWorstCaseDeparture, latestAirportArrivalTime, latestNormalDepartureTime, minsUntilLatestNormalDeparture, bestCaseTravelTime, latestAbsoluteDepartureTime, minsUntilLatestAbsoluteDeparture;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                //The RECOMMENDED # of minutes to arrive before departure \n                recommendedAirportTime = 120; //The MINIMUM # of minutes to arrive before departure\n\n                minimumAirportTime = 60;\n                flightDepartureDateTime = moment(this.state.departureTime + this.state.departureTimeZone);\n                curTime = moment(); //Wait for this call\n\n                _context2.prev = 4;\n                _context2.next = 7;\n                return this.getTravelInfo('bestguess');\n\n              case 7:\n                _context2.next = 12;\n                break;\n\n              case 9:\n                _context2.prev = 9;\n                _context2.t0 = _context2[\"catch\"](4);\n                console.error('error fetching directions');\n\n              case 12:\n                this.setState({\n                  directions: this.state.regularCaseResult\n                }); //The recommended air port arrival time \n\n                recommendedAirportArrivalTime = flightDepartureDateTime.subtract(recommendedAirportTime, 'minutes'); //Travel time in minutes \n\n                currentTravelTime = this.state.regularCaseResult.duration.value / 60;\n                recommendedDepartureTime = recommendedAirportArrivalTime.subtract(currentTravelTime, 'minutes'); //See if flight departure time minus recommended arrival gap minus bestguess travel time is < 90 mins\n\n                minsUntilDeparture = moment.duration(recommendedDepartureTime.diff(curTime)).asMinutes(); //If > 90 mins, let user know lots of time left but remind users that traffic conditions change may be a factor\n                //display bestguess time directions and travel time \n\n                if (!(minsUntilDeparture > 90)) {\n                  _context2.next = 22;\n                  break;\n                }\n\n                this.setState({\n                  travelInfo: \"Current Travel Time:\" + currentTravelTime + \"Flight Departure Time:\" + flightDepartureDateTime\n                });\n                this.setState({\n                  message: \"Over an hour left until you need to leave based on estimated travel time\" + \"and flight departure! However, keep in mind that traffic conditions may change from now until departure.\"\n                });\n                _context2.next = 62;\n                break;\n\n              case 22:\n                if (!(minsUntilDeparture > 30)) {\n                  _context2.next = 37;\n                  break;\n                }\n\n                _context2.prev = 23;\n                _context2.next = 26;\n                return this.getTravelInfo('pessimistic');\n\n              case 26:\n                _context2.next = 31;\n                break;\n\n              case 28:\n                _context2.prev = 28;\n                _context2.t1 = _context2[\"catch\"](23);\n                console.error('error fetching directions');\n\n              case 31:\n                //In case traffic is bad, check worst case traffic to see if user should leave earlier  \n                worstCaseTravelTime = this.state.worstCaseResult.duration.value / 60;\n                estimatedWorstCaseDepartureTime = recommendedAirportArrivalTime.subtract(worstCaseTravelTime, 'minutes');\n                minsUntilWorstCaseDeparture = moment.duration(estimatedWorstCaseDepartureTime.diff(curTime)).asMinutes();\n\n                if (minsUntilWorstCaseDeparture < 30) {\n                  this.setState({\n                    travelInfo: \"Current Travel Time:\" + currentTravelTime + \"-\" + worstCaseTravelTime + \"Flight Departure Time:\" + flightDepartureTime\n                  });\n                  this.setState({\n                    message: \"There is heavy traffic currently and your travel time may be much longer\" + \"than usual. We recommend that you leave soon.\"\n                  });\n                } else {\n                  this.setState({\n                    travelInfo: \"Current Travel Time:\" + currentTravelTime + \"-\" + worstCaseTravelTime + \"Flight Departure Time:\" + flightDepartureDateTime\n                  });\n                  this.setState({\n                    message: \"You should not have to leave in the next 30 mins. However keep in mind traffic conditions may change.\"\n                  });\n                }\n\n                _context2.next = 62;\n                break;\n\n              case 37:\n                if (!(minsUntilDeparture > 0)) {\n                  _context2.next = 42;\n                  break;\n                }\n\n                this.setState({\n                  travelInfo: \"Current Travel Time:\" + currentTravelTime + \"Flight Departure Time:\" + flightDepartureTime\n                });\n                this.setState({\n                  message: \"You should leave soon.\"\n                });\n                _context2.next = 62;\n                break;\n\n              case 42:\n                latestAirportArrivalTime = flightDepartureDateTime.subtract(minimumAirportTime, 'minutes');\n                latestNormalDepartureTime = latestAirportArrivalTime.subtract(currentTravelTime, 'minutes');\n                minsUntilLatestNormalDeparture = moment.duration(latestNormalDepartureTime.diff(curTime)).asMinutes();\n\n                if (!(minsUntilLatestNormalDeparture > 0)) {\n                  _context2.next = 50;\n                  break;\n                }\n\n                this.setState({\n                  travelInfo: \"Current Travel Time:\" + currentTravelTime + \"Flight Departure Time:\" + flightDepartureTime\n                });\n                this.setState({\n                  message: \"You should leave immediately. Any delays at airport may cause you to miss your flight.\"\n                });\n                _context2.next = 62;\n                break;\n\n              case 50:\n                _context2.prev = 50;\n                _context2.next = 53;\n                return this.getTravelInfo('optimistic');\n\n              case 53:\n                _context2.next = 58;\n                break;\n\n              case 55:\n                _context2.prev = 55;\n                _context2.t2 = _context2[\"catch\"](50);\n                console.error('error fetching directions');\n\n              case 58:\n                bestCaseTravelTime = bestCaseResult.duration.value / 60;\n                latestAbsoluteDepartureTime = latestAirportArrivalTime.subtract(bestCaseTravelTime, 'minutes');\n                minsUntilLatestAbsoluteDeparture = moment.duration(latestAbsoluteDepartureTime.diff(curTime)).asMinutes();\n\n                if (minsUntilLatestAbsoluteDeparture > 0) {\n                  this.setState({\n                    travelInfo: \"Current Travel Time:\" + bestCaseTravelTime + \"-\" + currentTravelTime + \"Flight Departure Time:\" + flightDepartureTime\n                  });\n                  this.setState({\n                    message: \"We recommend you leave immediately. Based on our projections, any traffic or airport delays may cause you to miss your flight.\"\n                  });\n                } else {\n                  this.setState({\n                    travelInfo: \"Current Travel Time:\" + bestCaseTravelTime + \"-\" + currentTravelTime + \"Flight Departure Time:\" + flightDepartureTime\n                  });\n                  this.setState({\n                    message: \"According to our calculations, you are most likely unable to make this flight.\"\n                  });\n                }\n\n              case 62:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[4, 9], [23, 28], [50, 55]]);\n      }));\n\n      function calculateDepartureTime() {\n        return _calculateDepartureTime.apply(this, arguments);\n      }\n\n      return calculateDepartureTime;\n    }()\n  }, {\n    key: \"getTravelInfo\",\n    value: function getTravelInfo(trafficModel) {\n      var _this2 = this;\n\n      var travelMode = \"DRIVING\";\n      var drivingOptions = {\n        departureTime: new Date(),\n        trafficModel: trafficModel\n      };\n      var DirectionsService = new google.maps.DirectionsService();\n      DirectionsService.route({\n        origin: this.state.homeAddress,\n        destination: this.state.departureSite,\n        travelMode: travelMode,\n        drivingOptions: drivingOptions\n      }, function (result, status) {\n        if (status === google.maps.DirectionsStatus.OK) {\n          console.log(result.routes[0].legs[0]);\n          var resultInfo = result.routes[0].legs[0];\n\n          if (trafficModel === 'optimistic') {\n            _this2.setState({\n              bestCaseResult: resultInfo\n            });\n          } else if (trafficModel === 'pessimistic') {\n            _this2.setState({\n              worstCaseResult: resultInfo\n            });\n          } else {\n            _this2.setState({\n              regularCaseResult: resultInfo\n            });\n          }\n        } else {\n          console.error(\"error fetching directions \".concat(result));\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 286\n        },\n        __self: this\n      }, React.createElement(Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 287\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 289\n        },\n        __self: this\n      }, this.state.directions !== null && React.createElement(\"div\", {\n        className: \"mapPane\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 291\n        },\n        __self: this\n      }, React.createElement(DirectionsMap, {\n        directions: this.state.directions,\n        origin: this.state.testOrigin,\n        destination: this.state.testDest,\n        travelMode: this.state.travelMode,\n        drivingOptions: this.state.drivingOptions,\n        googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=\" + this.state.mapsAPI + \"&v=3.exp&libraries=geometry,drawing,places\",\n        mapsAPI: this.state.mapsAPI,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 292\n        },\n        __self: this\n      })), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 303\n        },\n        __self: this\n      }, this.state.message), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 304\n        },\n        __self: this\n      }, this.state.travelInfo), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 306\n        },\n        __self: this\n      }, this.state.departureSite), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 307\n        },\n        __self: this\n      }, this.state.arrivalSite), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 308\n        },\n        __self: this\n      }, this.state.airline), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 309\n        },\n        __self: this\n      }, this.state.flightNum), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 310\n        },\n        __self: this\n      }, this.state.departureTime), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 311\n        },\n        __self: this\n      }, this.state.departureTimeZone)));\n    }\n  }]);\n\n  return ResultPage;\n}(Component);\n\nexport { ResultPage as default };","map":{"version":3,"sources":["C:\\Users\\zhang\\OneDrive\\Documents\\Personal Projects\\departure-planner\\react-backend\\client\\src\\components\\ResultPage.js"],"names":["React","Component","ReactLoading","Header","DirectionsMap","axios","moment","ResultPage","props","state","departureSite","location","arrivalSite","airline","flightNum","flightDate","homeAddress","mapsAPI","flightExists","departureTime","departureTimeZone","worstCaseResult","regularCaseResult","bestCaseResult","directions","message","travelInfo","searchFlight","bind","getDepartureDetails","calculateDepartureTime","getTravelInfo","console","log","apiKey","process","env","REACT_APP_GOOGLE_API_KEY","setState","flightSearchKey","REACT_APP_FLIGHT_API_KEY","proxyurl","init","headers","params","self","get","then","response","data","catch","error","flightData","parser","DOMParser","xmlDoc","parseFromString","getElementsByTagName","length","flightDepartureTime","getAttribute","flightDepartureTimeZone","recommendedAirportTime","minimumAirportTime","flightDepartureDateTime","curTime","recommendedAirportArrivalTime","subtract","currentTravelTime","duration","value","recommendedDepartureTime","minsUntilDeparture","diff","asMinutes","worstCaseTravelTime","estimatedWorstCaseDepartureTime","minsUntilWorstCaseDeparture","latestAirportArrivalTime","latestNormalDepartureTime","minsUntilLatestNormalDeparture","bestCaseTravelTime","latestAbsoluteDepartureTime","minsUntilLatestAbsoluteDeparture","trafficModel","travelMode","drivingOptions","Date","DirectionsService","google","maps","route","origin","destination","result","status","DirectionsStatus","OK","routes","legs","resultInfo","testOrigin","testDest"],"mappings":"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","sourcesContent":["/* global google */\r\n\r\nimport React, { Component } from 'react';\r\nimport ReactLoading from 'react-loading';\r\n\r\nimport Header from './Header.js';\r\nimport DirectionsMap from './DirectionsMap.js'\r\n\r\nimport axios from 'axios'\r\nimport moment from 'moment'\r\n\r\n\r\n\r\nexport default class ResultPage extends Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      departureSite: this.props.location.state.departureSite,\r\n      arrivalSite: this.props.location.state.arrivalSite,\r\n      airline: this.props.location.state.airline,\r\n      flightNum: this.props.location.state.flightNum,\r\n      flightDate: this.props.location.state.flightDate,\r\n      homeAddress: this.props.location.state.homeAddress,\r\n\r\n\r\n      mapsAPI: \"\", \r\n\r\n\r\n      flightExists: null,\r\n\r\n      departureTime: \"2018-12-19T19:50:00\",\r\n      departureTimeZone: \"-0800\",\r\n      \r\n\r\n\r\n      worstCaseResult: null,\r\n      regularCaseResult: null,\r\n      bestCaseResult: null,\r\n      directions: null,\r\n\r\n      message: \"\",\r\n      travelInfo: \"\",\r\n    }\r\n\r\n    this.searchFlight = this.searchFlight.bind(this);\r\n    this.getDepartureDetails = this.getDepartureDetails.bind(this);\r\n    this.calculateDepartureTime = this.calculateDepartureTime.bind(this);\r\n    this.getTravelInfo = this.getTravelInfo.bind(this);\r\n  }\r\n\r\n  componentDidMount(){\r\n      console.log(this.state);\r\n\r\n      const apiKey = process.env.REACT_APP_GOOGLE_API_KEY;\r\n      this.setState({mapsAPI: apiKey})\r\n\r\n      //Must wait for this server call\r\n      //  this.searchFlight();\r\n\r\n      if(this.state.flightExists === true)\r\n        //Must wait for this server call\r\n        this.calculateDepartureTime();\r\n      \r\n  }\r\n\r\n\r\n  async searchFlight(){\r\n    const flightSearchKey = process.env.REACT_APP_FLIGHT_API_KEY;\r\n    const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\r\n    const init = {\r\n      headers: {\r\n        \"Ocp-Apim-Subscription-Key\": flightSearchKey\r\n      },\r\n      params: {\r\n        \"Airline\": this.state.airline,\r\n        \"FlightNumber\": this.state.flightNum,\r\n      }\r\n    }\r\n    var self = this;\r\n    await axios.get(proxyurl + \"https://flightlookup.azure-api.net/v1/xml/TimeTable/\" \r\n    + this.state.departureSite + \"/\" + this.state.arrivalSite + \"/\" \r\n    + this.state.flightDate, init)\r\n    .then(function (response) {\r\n      // console.log(response.data);\r\n      self.getDepartureDetails(response.data);      \r\n    })\r\n    .catch(function (error) {\r\n      console.log(error);\r\n    });\r\n  }\r\n\r\n  getDepartureDetails(flightData){\r\n    var parser = new DOMParser();\r\n    var xmlDoc = parser.parseFromString(flightData,\"text/xml\");\r\n    \r\n   \r\n    if(!xmlDoc.getElementsByTagName(\"Success\").length === 0){\r\n      console.log(\"Search Failed!\");\r\n      this.setState({flightExists: false});\r\n    }\r\n\r\n    else{\r\n      var flightDepartureTime = xmlDoc.getElementsByTagName(\"FlightDetails\")[0].getAttribute(\"FLSDepartureDateTime\");\r\n      var flightDepartureTimeZone = xmlDoc.getElementsByTagName(\"FlightDetails\")[0].getAttribute(\"FLSDepartureTimeOffset\");\r\n\r\n      this.setState({departureTime: flightDepartureTime, departureTimeZone: flightDepartureTimeZone});\r\n      this.setState({flightExists: true});\r\n    }\r\n  }\r\n\r\n  async calculateDepartureTime(){\r\n    //The RECOMMENDED # of minutes to arrive before departure \r\n    const recommendedAirportTime = 120;\r\n\r\n    //The MINIMUM # of minutes to arrive before departure\r\n    const minimumAirportTime = 60;\r\n\r\n    const flightDepartureDateTime = moment(this.state.departureTime + this.state.departureTimeZone);\r\n    const curTime = moment();\r\n    \r\n\r\n    //Wait for this call\r\n    try{\r\n      await this.getTravelInfo('bestguess');\r\n    }\r\n    catch(error){\r\n      console.error('error fetching directions');\r\n    }\r\n\r\n    this.setState({directions: this.state.regularCaseResult});\r\n\r\n\r\n    //The recommended air port arrival time \r\n    const recommendedAirportArrivalTime = flightDepartureDateTime.subtract(recommendedAirportTime, 'minutes');\r\n\r\n\r\n    //Travel time in minutes \r\n    const currentTravelTime = this.state.regularCaseResult.duration.value/60;\r\n\r\n    const recommendedDepartureTime =  recommendedAirportArrivalTime.subtract(currentTravelTime, 'minutes');\r\n\r\n\r\n    //See if flight departure time minus recommended arrival gap minus bestguess travel time is < 90 mins\r\n    const minsUntilDeparture = moment.duration(recommendedDepartureTime.diff(curTime)).asMinutes(); \r\n\r\n\r\n\r\n    //If > 90 mins, let user know lots of time left but remind users that traffic conditions change may be a factor\r\n    //display bestguess time directions and travel time \r\n    if(minsUntilDeparture > 90){\r\n      this.setState({travelInfo: \"Current Travel Time:\" + currentTravelTime + \"Flight Departure Time:\" + flightDepartureDateTime});\r\n      this.setState({message: \"Over an hour left until you need to leave based on estimated travel time\"\r\n      + \"and flight departure! However, keep in mind that traffic conditions may change from now until departure.\"});\r\n    }\r\n\r\n     //If < 90 mins and > 30 mins, run pessimistic traffic model search and see if large delays \r\n      //If pessmistic travel time is < 30 mins recommend that user leaves soon\r\n\r\n      //If none of these cases are true, just state # of minutes until recommended departure time \r\n      //display bestguess directions, but BOTH bestguess and pessismistic travel times \r\n    else if(minsUntilDeparture > 30){\r\n\r\n      //Must wait for this call \r\n      try{\r\n        await this.getTravelInfo('pessimistic');\r\n      }\r\n      catch(error){\r\n        console.error('error fetching directions');\r\n      }\r\n      \r\n\r\n      //In case traffic is bad, check worst case traffic to see if user should leave earlier  \r\n      const worstCaseTravelTime = this.state.worstCaseResult.duration.value/60;\r\n\r\n      const estimatedWorstCaseDepartureTime = recommendedAirportArrivalTime.subtract(worstCaseTravelTime, 'minutes');\r\n      const minsUntilWorstCaseDeparture = moment.duration(estimatedWorstCaseDepartureTime.diff(curTime)).asMinutes();\r\n      \r\n\r\n      if(minsUntilWorstCaseDeparture < 30){\r\n        this.setState({travelInfo: \"Current Travel Time:\" + currentTravelTime + \"-\" + worstCaseTravelTime + \"Flight Departure Time:\" + flightDepartureTime});\r\n        this.setState({message: \"There is heavy traffic currently and your travel time may be much longer\" +\r\n        \"than usual. We recommend that you leave soon.\"});\r\n      }\r\n      else{\r\n        this.setState({travelInfo: \"Current Travel Time:\" + currentTravelTime + \"-\" + worstCaseTravelTime + \"Flight Departure Time:\" + flightDepartureDateTime});\r\n        this.setState({message: \"You should not have to leave in the next 30 mins. However keep in mind traffic conditions may change.\"})\r\n      }\r\n    }\r\n\r\n\r\n    //If best guess < 30 mins, let user know that they should leave soon (and display time left) \r\n    //display bestguess time directions and travel time\r\n    else if(minsUntilDeparture > 0){\r\n      this.setState({travelInfo: \"Current Travel Time:\" + currentTravelTime + \"Flight Departure Time:\" + flightDepartureTime});\r\n      this.setState({message: \"You should leave soon.\"});\r\n    }\r\n\r\n\r\n    //If best guess is negative time (not enough time left until departure)\r\n      //If using minimum arrival gap is positive, tell user they should leave immediately and \r\n    \r\n      //If still negative, add optimistic traffic model and check again...if positive, let user know\r\n      //to leave immediately but they might not make their flight \r\n\r\n      //If all the above added and still negative let user know that they will not be able to make their\r\n      //flight with DeparturePlanner calculations \r\n\r\n      //display optimistic time directions and travel time \r\n    else{\r\n      const latestAirportArrivalTime = flightDepartureDateTime.subtract(minimumAirportTime, 'minutes');\r\n      const latestNormalDepartureTime = latestAirportArrivalTime.subtract(currentTravelTime, 'minutes');\r\n      const minsUntilLatestNormalDeparture = moment.duration(latestNormalDepartureTime.diff(curTime)).asMinutes();\r\n\r\n      if(minsUntilLatestNormalDeparture > 0){\r\n        this.setState({travelInfo: \"Current Travel Time:\" + currentTravelTime + \"Flight Departure Time:\" + flightDepartureTime});\r\n        this.setState({message: \"You should leave immediately. Any delays at airport may cause you to miss your flight.\"});\r\n      }\r\n      else{\r\n        //Must wait for this call \r\n        try{\r\n          await this.getTravelInfo('optimistic');\r\n        }\r\n        catch(error){\r\n          console.error('error fetching directions');\r\n        }\r\n\r\n        const bestCaseTravelTime = bestCaseResult.duration.value/60;\r\n        const latestAbsoluteDepartureTime = latestAirportArrivalTime.subtract(bestCaseTravelTime, 'minutes');\r\n        const minsUntilLatestAbsoluteDeparture = moment.duration(latestAbsoluteDepartureTime.diff(curTime)).asMinutes();\r\n\r\n        if(minsUntilLatestAbsoluteDeparture > 0){\r\n          this.setState({travelInfo: \"Current Travel Time:\" + bestCaseTravelTime + \"-\" + currentTravelTime + \"Flight Departure Time:\" + flightDepartureTime});\r\n          this.setState({message: \"We recommend you leave immediately. Based on our projections, any traffic or airport delays may cause you to miss your flight.\"});\r\n        }\r\n        else{\r\n          this.setState({travelInfo: \"Current Travel Time:\" + bestCaseTravelTime +  \"-\" + currentTravelTime + \"Flight Departure Time:\" + flightDepartureTime});\r\n          this.setState({message: \"According to our calculations, you are most likely unable to make this flight.\"});\r\n        } \r\n      }\r\n    }\r\n  }\r\n\r\n  \r\n  getTravelInfo(trafficModel){\r\n    const travelMode =  \"DRIVING\";\r\n    const drivingOptions = {\r\n      departureTime: new Date(),\r\n      trafficModel: trafficModel\r\n    };\r\n    const DirectionsService = new google.maps.DirectionsService();\r\n    DirectionsService.route({\r\n      origin: this.state.homeAddress,\r\n      destination: this.state.departureSite,\r\n      travelMode: travelMode,\r\n      drivingOptions: drivingOptions}, \r\n      \r\n      (result, status) => {\r\n      if (status === google.maps.DirectionsStatus.OK) {\r\n        console.log(result.routes[0].legs[0]);\r\n        const resultInfo = result.routes[0].legs[0];\r\n\r\n        if(trafficModel === 'optimistic'){\r\n          this.setState({\r\n            bestCaseResult: resultInfo,\r\n          });\r\n        }\r\n        else if(trafficModel === 'pessimistic'){\r\n          this.setState({\r\n            worstCaseResult: resultInfo,\r\n          });\r\n        }\r\n        else{\r\n          this.setState({\r\n            regularCaseResult: resultInfo,\r\n          });\r\n        }\r\n      } else {\r\n        console.error(`error fetching directions ${result}`);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  render(){\r\n    return(\r\n      <div>\r\n        <Header>\r\n        </Header>\r\n          <div>\r\n            {this.state.directions !== null && \r\n            <div className=\"mapPane\">        \r\n              <DirectionsMap\r\n                directions={this.state.directions}\r\n                origin={this.state.testOrigin} \r\n                destination={this.state.testDest} \r\n                travelMode={this.state.travelMode} \r\n                drivingOptions={this.state.drivingOptions}\r\n                googleMapURL={\"https://maps.googleapis.com/maps/api/js?key=\" + this.state.mapsAPI + \"&v=3.exp&libraries=geometry,drawing,places\"}\r\n                mapsAPI={this.state.mapsAPI}/> \r\n            </div>\r\n            }\r\n\r\n            <p>{this.state.message}</p>\r\n            <p>{this.state.travelInfo}</p>\r\n\r\n            <p>{this.state.departureSite}</p>\r\n            <p>{this.state.arrivalSite}</p>\r\n            <p>{this.state.airline}</p>\r\n            <p>{this.state.flightNum}</p>\r\n            <p>{this.state.departureTime}</p>\r\n            <p>{this.state.departureTimeZone}</p>\r\n          </div>\r\n    </div>\r\n    );\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}