{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\zhang\\\\OneDrive\\\\Documents\\\\Personal Projects\\\\departure-planner\\\\react-backend\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\zhang\\\\OneDrive\\\\Documents\\\\Personal Projects\\\\departure-planner\\\\react-backend\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\zhang\\\\OneDrive\\\\Documents\\\\Personal Projects\\\\departure-planner\\\\react-backend\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\zhang\\\\OneDrive\\\\Documents\\\\Personal Projects\\\\departure-planner\\\\react-backend\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\zhang\\\\OneDrive\\\\Documents\\\\Personal Projects\\\\departure-planner\\\\react-backend\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\zhang\\\\OneDrive\\\\Documents\\\\Personal Projects\\\\departure-planner\\\\react-backend\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\zhang\\\\OneDrive\\\\Documents\\\\Personal Projects\\\\departure-planner\\\\react-backend\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\zhang\\\\OneDrive\\\\Documents\\\\Personal Projects\\\\departure-planner\\\\react-backend\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\zhang\\\\OneDrive\\\\Documents\\\\Personal Projects\\\\departure-planner\\\\react-backend\\\\client\\\\src\\\\components\\\\ResultPage.js\";\nimport React, { Component } from 'react';\nimport Header from './Header.js';\nimport DirectionsMap from './DirectionsMap.js';\nimport axios from 'axios';\nimport moment from 'moment';\n\nvar ResultPage =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ResultPage, _Component);\n\n  function ResultPage(props) {\n    var _this;\n\n    _classCallCheck(this, ResultPage);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ResultPage).call(this, props));\n    _this.state = {\n      departureSite: _this.props.location.state.departureSite,\n      arrivalSite: _this.props.location.state.arrivalSite,\n      airline: _this.props.location.state.airline,\n      flightNum: _this.props.location.state.flightNum,\n      flightDate: _this.props.location.state.flightDate,\n      homeAddress: _this.props.location.state.homeAddress,\n      flightExists: null,\n      departureTime: \"2019-01-20T17:50:00\",\n      departureTimeZone: \"-0500\",\n      worstCaseResult: null,\n      regularCaseResult: null,\n      bestCaseResult: null,\n      directions: null,\n      message: \"\",\n      travelInfo: \"\"\n    };\n    _this.searchFlight = _this.searchFlight.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.getDepartureDetails = _this.getDepartureDetails.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.calculateDeparture = _this.calculateDeparture.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(ResultPage, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var apiKey = process.env.REACT_APP_GOOGLE_API_KEY;\n      this.setState({\n        mapsAPI: apiKey\n      }); //Must wait for this server call\n      // this.searchFlight();\n      // if(this.state.flightExists === true)\n      //Must wait for this server call\n      // this.calculateDeparture();\n\n      this.calculateDeparture();\n    }\n  }, {\n    key: \"searchFlight\",\n    value: function () {\n      var _searchFlight = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var flightSearchKey, proxyurl, init, self;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                flightSearchKey = process.env.REACT_APP_FLIGHT_API_KEY;\n                proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n                init = {\n                  headers: {\n                    \"Ocp-Apim-Subscription-Key\": flightSearchKey\n                  },\n                  params: {\n                    \"Airline\": this.state.airline,\n                    \"FlightNumber\": this.state.flightNum\n                  }\n                };\n                self = this;\n                _context.next = 6;\n                return axios.get(proxyurl + \"https://flightlookup.azure-api.net/v1/xml/TimeTable/\" + this.state.departureSite + \"/\" + this.state.arrivalSite + \"/\" + this.state.flightDate, init).then(function (response) {\n                  // console.log(response.data);\n                  self.getDepartureDetails(response.data);\n                }).catch(function (error) {\n                  console.log(error);\n                });\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function searchFlight() {\n        return _searchFlight.apply(this, arguments);\n      }\n\n      return searchFlight;\n    }()\n  }, {\n    key: \"getDepartureDetails\",\n    value: function getDepartureDetails(flightData) {\n      var parser = new DOMParser();\n      var xmlDoc = parser.parseFromString(flightData, \"text/xml\");\n\n      if (!xmlDoc.getElementsByTagName(\"Success\").length === 0) {\n        console.log(\"Search Failed!\");\n        this.setState({\n          flightExists: false\n        });\n      } else {\n        var departureTime = xmlDoc.getElementsByTagName(\"FlightDetails\")[0].getAttribute(\"FLSDepartureDateTime\");\n        var departureTimeZone = xmlDoc.getElementsByTagName(\"FlightDetails\")[0].getAttribute(\"FLSDepartureTimeOffset\");\n        this.setState({\n          departureTime: departureTime,\n          departureTimeZone: departureTimeZone\n        });\n        this.setState({\n          flightExists: true\n        });\n      }\n    }\n  }, {\n    key: \"calculateDeparture\",\n    value: function () {\n      var _calculateDeparture = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var _this2 = this;\n\n        var recommendedAirportTime, minimumAirportTime, flightDepartureTime, flightDepartureTimeStr, curTime, recommendedAirportArrivalTime, currentTravelTime, recommendedDepartureTime, minsUntilDeparture, worstCaseTravelTime, estimatedWorstCaseDepartureTime, minsUntilWorstCaseDeparture, latestAirportArrivalTime, latestNormalDepartureTime, minsUntilLatestNormalDeparture, bestCaseTravelTime, latestAbsoluteDepartureTime, minsUntilLatestAbsoluteDeparture;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                //The RECOMMENDED # of minutes to arrive before departure \n                recommendedAirportTime = 120; //The MINIMUM # of minutes to arrive before departure\n\n                minimumAirportTime = 60;\n                flightDepartureTime = moment(this.state.departureTime + this.state.departureTimeZone);\n                flightDepartureTimeStr = flightDepartureTime.format('MMMM Do YYYY, h:mm:ss a');\n                curTime = moment();\n                _context2.next = 7;\n                return axios.get('/time?' + 'origin=' + this.state.homeAddress + '&destination=' + this.state.departureSite + '&trafficMode=best_guess').then(function (res) {\n                  return _this2.setState({\n                    directions: res.data.directions\n                  });\n                });\n\n              case 7:\n                this.setState({\n                  regularCaseResult: this.state.directions\n                }); //The recommended air port arrival time \n\n                recommendedAirportArrivalTime = flightDepartureTime.clone().subtract(recommendedAirportTime, 'minutes'); //Travel time in minutes \n\n                currentTravelTime = this.state.regularCaseResult.duration_in_traffic.value / 60;\n                recommendedDepartureTime = recommendedAirportArrivalTime.clone().subtract(currentTravelTime, 'minutes'); // console.log(recommendedDepartureTime.format('MMMM Do YYYY, h:mm:ss a'));\n                //See if flight departure time minus recommended arrival gap minus bestguess travel time is < 90 mins\n\n                minsUntilDeparture = moment.duration(recommendedDepartureTime.diff(curTime)).asMinutes();\n                console.log(minsUntilDeparture); //If > 90 mins, let user know lots of time left but remind users that traffic conditions change may be a factor\n                //display bestguess time directions and travel time \n\n                if (!(minsUntilDeparture > 90)) {\n                  _context2.next = 18;\n                  break;\n                }\n\n                this.setState({\n                  travelInfo: \"Current Travel Time:\" + currentTravelTime + \"Flight Departure Time:\" + flightDepartureTimeStr\n                });\n                this.setState({\n                  message: \"Over an hour left until you need to leave based on estimated travel time\" + \"and flight departure! However, keep in mind that traffic conditions may change from now until departure.\"\n                });\n                _context2.next = 58;\n                break;\n\n              case 18:\n                if (!(minsUntilDeparture > 30)) {\n                  _context2.next = 33;\n                  break;\n                }\n\n                _context2.prev = 19;\n                _context2.next = 22;\n                return axios.get('/time?' + 'origin=' + this.state.homeAddress + '&destination=' + this.state.departureSite + '&trafficMode=pessimistic').then(function (res) {\n                  return _this2.setState({\n                    worstCaseResult: res.data.directions\n                  });\n                });\n\n              case 22:\n                _context2.next = 27;\n                break;\n\n              case 24:\n                _context2.prev = 24;\n                _context2.t0 = _context2[\"catch\"](19);\n                console.error('error fetching directions');\n\n              case 27:\n                //In case traffic is bad, check worst case traffic to see if user should leave earlier  \n                worstCaseTravelTime = this.state.worstCaseResult.duration_in_traffic.value / 60;\n                estimatedWorstCaseDepartureTime = recommendedAirportArrivalTime.clone().subtract(worstCaseTravelTime, 'minutes');\n                minsUntilWorstCaseDeparture = moment.duration(estimatedWorstCaseDepartureTime.diff(curTime)).asMinutes();\n\n                if (minsUntilWorstCaseDeparture < 30) {\n                  this.setState({\n                    travelInfo: \"Current Travel Time:\" + currentTravelTime + \"-\" + worstCaseTravelTime + \"Flight Departure Time:\" + flightDepartureTimeStr\n                  });\n                  this.setState({\n                    message: \"There is heavy traffic currently and your travel time may be much longer \" + \"than usual. We recommend that you leave soon.\"\n                  });\n                } else {\n                  this.setState({\n                    travelInfo: \"Current Travel Time:\" + currentTravelTime + \"-\" + worstCaseTravelTime + \"Flight Departure Time:\" + flightDepartureTimeStr\n                  });\n                  this.setState({\n                    message: \"You should not have to leave in the next 30 mins. However keep in mind traffic conditions may change.\"\n                  });\n                }\n\n                _context2.next = 58;\n                break;\n\n              case 33:\n                if (!(minsUntilDeparture > 0)) {\n                  _context2.next = 38;\n                  break;\n                }\n\n                this.setState({\n                  travelInfo: \"Current Travel Time:\" + currentTravelTime + \"Flight Departure Time:\" + flightDepartureTimeStr\n                });\n                this.setState({\n                  message: \"You should leave soon.\"\n                });\n                _context2.next = 58;\n                break;\n\n              case 38:\n                latestAirportArrivalTime = flightDepartureTime.clone().subtract(minimumAirportTime, 'minutes');\n                latestNormalDepartureTime = latestAirportArrivalTime.clone().subtract(currentTravelTime, 'minutes');\n                minsUntilLatestNormalDeparture = moment.duration(latestNormalDepartureTime.diff(curTime)).asMinutes();\n\n                if (!(minsUntilLatestNormalDeparture > 0)) {\n                  _context2.next = 46;\n                  break;\n                }\n\n                this.setState({\n                  travelInfo: \"Current Travel Time:\" + currentTravelTime + \"Flight Departure Time:\" + flightDepartureTimeStr\n                });\n                this.setState({\n                  message: \"You should leave immediately. Based on our projections, any traffic or airport delays may cause you to miss your flight.\"\n                });\n                _context2.next = 58;\n                break;\n\n              case 46:\n                _context2.prev = 46;\n                _context2.next = 49;\n                return axios.get('/time?' + 'origin=' + this.state.homeAddress + '&destination=' + this.state.departureSite + '&trafficMode=optimistic').then(function (res) {\n                  return _this2.setState({\n                    bestCaseResult: res.data.directions\n                  });\n                });\n\n              case 49:\n                _context2.next = 54;\n                break;\n\n              case 51:\n                _context2.prev = 51;\n                _context2.t1 = _context2[\"catch\"](46);\n                console.error('error fetching directions');\n\n              case 54:\n                bestCaseTravelTime = this.state.bestCaseResult.duration_in_traffic.value / 60;\n                latestAbsoluteDepartureTime = latestAirportArrivalTime.clone().subtract(bestCaseTravelTime, 'minutes');\n                minsUntilLatestAbsoluteDeparture = moment.duration(latestAbsoluteDepartureTime.diff(curTime)).asMinutes();\n\n                if (minsUntilLatestAbsoluteDeparture > 0) {\n                  this.setState({\n                    travelInfo: \"Current Travel Time:\" + bestCaseTravelTime + \"-\" + currentTravelTime + \"Flight Departure Time:\" + flightDepartureTimeStr\n                  });\n                  this.setState({\n                    message: \"We recommend you leave immediately. Based on our projections, any traffic or airport delays may cause you to miss your flight.\"\n                  });\n                } else {\n                  this.setState({\n                    travelInfo: \"Current Travel Time:\" + bestCaseTravelTime + \"-\" + currentTravelTime + \"Flight Departure Time:\" + flightDepartureTimeStr\n                  });\n                  this.setState({\n                    message: \"According to our calculations, you are most likely unable to make this flight.\"\n                  });\n                }\n\n              case 58:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[19, 24], [46, 51]]);\n      }));\n\n      function calculateDeparture() {\n        return _calculateDeparture.apply(this, arguments);\n      }\n\n      return calculateDeparture;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245\n        },\n        __self: this\n      }, React.createElement(Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247\n        },\n        __self: this\n      }, this.state.directions !== null && React.createElement(\"div\", {\n        className: \"mapPane\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249\n        },\n        __self: this\n      }, React.createElement(DirectionsMap, {\n        directions: this.state.directions,\n        googleMapURL: this.state.mapsAPI // origin={this.state.departureSite} \n        // destination={this.state.homeAddress} \n        // travelMode={this.state.travelMode} \n        // drivingOptions={this.state.drivingOptions}\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250\n        },\n        __self: this\n      })), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261\n        },\n        __self: this\n      }, this.state.message), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 262\n        },\n        __self: this\n      }, this.state.travelInfo), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264\n        },\n        __self: this\n      }, this.state.departureSite), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 265\n        },\n        __self: this\n      }, this.state.arrivalSite), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266\n        },\n        __self: this\n      }, this.state.airline), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 267\n        },\n        __self: this\n      }, this.state.flightNum), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268\n        },\n        __self: this\n      }, this.state.departureTime), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269\n        },\n        __self: this\n      }, this.state.departureTimeZone)));\n    }\n  }]);\n\n  return ResultPage;\n}(Component);\n\nexport { ResultPage as default };","map":{"version":3,"sources":["C:\\Users\\zhang\\OneDrive\\Documents\\Personal Projects\\departure-planner\\react-backend\\client\\src\\components\\ResultPage.js"],"names":["React","Component","Header","DirectionsMap","axios","moment","ResultPage","props","state","departureSite","location","arrivalSite","airline","flightNum","flightDate","homeAddress","flightExists","departureTime","departureTimeZone","worstCaseResult","regularCaseResult","bestCaseResult","directions","message","travelInfo","searchFlight","bind","getDepartureDetails","calculateDeparture","apiKey","process","env","REACT_APP_GOOGLE_API_KEY","setState","mapsAPI","flightSearchKey","REACT_APP_FLIGHT_API_KEY","proxyurl","init","headers","params","self","get","then","response","data","catch","error","console","log","flightData","parser","DOMParser","xmlDoc","parseFromString","getElementsByTagName","length","getAttribute","recommendedAirportTime","minimumAirportTime","flightDepartureTime","flightDepartureTimeStr","format","curTime","res","recommendedAirportArrivalTime","clone","subtract","currentTravelTime","duration_in_traffic","value","recommendedDepartureTime","minsUntilDeparture","duration","diff","asMinutes","worstCaseTravelTime","estimatedWorstCaseDepartureTime","minsUntilWorstCaseDeparture","latestAirportArrivalTime","latestNormalDepartureTime","minsUntilLatestNormalDeparture","bestCaseTravelTime","latestAbsoluteDepartureTime","minsUntilLatestAbsoluteDeparture"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport Header from './Header.js';\r\nimport DirectionsMap from './DirectionsMap.js'\r\n\r\n\r\nimport axios from 'axios'\r\nimport moment from 'moment'\r\n\r\n\r\n\r\nexport default class ResultPage extends Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      departureSite: this.props.location.state.departureSite,\r\n      arrivalSite: this.props.location.state.arrivalSite,\r\n      airline: this.props.location.state.airline,\r\n      flightNum: this.props.location.state.flightNum,\r\n      flightDate: this.props.location.state.flightDate,\r\n      homeAddress: this.props.location.state.homeAddress,\r\n\r\n\r\n      flightExists: null,\r\n\r\n      departureTime: \"2019-01-20T17:50:00\",\r\n      departureTimeZone: \"-0500\",\r\n\r\n      worstCaseResult: null,\r\n      regularCaseResult: null,\r\n      bestCaseResult: null,\r\n      directions: null,\r\n\r\n      message: \"\",\r\n      travelInfo: \"\",\r\n    }\r\n\r\n    this.searchFlight = this.searchFlight.bind(this);\r\n    this.getDepartureDetails = this.getDepartureDetails.bind(this);\r\n    this.calculateDeparture = this.calculateDeparture.bind(this);\r\n    \r\n  }\r\n\r\n  componentDidMount(){\r\n      const apiKey = process.env.REACT_APP_GOOGLE_API_KEY;\r\n      this.setState({mapsAPI: apiKey})\r\n\r\n      //Must wait for this server call\r\n      // this.searchFlight();\r\n\r\n      // if(this.state.flightExists === true)\r\n        //Must wait for this server call\r\n        // this.calculateDeparture();\r\n      this.calculateDeparture();\r\n  }\r\n\r\n\r\n  async searchFlight(){\r\n    const flightSearchKey = process.env.REACT_APP_FLIGHT_API_KEY;\r\n    const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\r\n    const init = {\r\n      headers: {\r\n        \"Ocp-Apim-Subscription-Key\": flightSearchKey\r\n      },\r\n      params: {\r\n        \"Airline\": this.state.airline,\r\n        \"FlightNumber\": this.state.flightNum,\r\n      }\r\n    }\r\n    var self = this;\r\n    await axios.get(proxyurl + \"https://flightlookup.azure-api.net/v1/xml/TimeTable/\" \r\n    + this.state.departureSite + \"/\" + this.state.arrivalSite + \"/\" \r\n    + this.state.flightDate, init)\r\n    .then(function (response) {\r\n      // console.log(response.data);\r\n      self.getDepartureDetails(response.data);      \r\n    })\r\n    .catch(function (error) {\r\n      console.log(error);\r\n    });\r\n  }\r\n\r\n\r\n  getDepartureDetails(flightData){\r\n    var parser = new DOMParser();\r\n    var xmlDoc = parser.parseFromString(flightData,\"text/xml\");\r\n    \r\n    if(!xmlDoc.getElementsByTagName(\"Success\").length === 0){\r\n      console.log(\"Search Failed!\");\r\n      this.setState({flightExists: false});\r\n    }\r\n\r\n    else{\r\n      var departureTime = xmlDoc.getElementsByTagName(\"FlightDetails\")[0].getAttribute(\"FLSDepartureDateTime\");\r\n      var departureTimeZone = xmlDoc.getElementsByTagName(\"FlightDetails\")[0].getAttribute(\"FLSDepartureTimeOffset\");\r\n\r\n      this.setState({departureTime: departureTime, departureTimeZone: departureTimeZone});\r\n      this.setState({flightExists: true});\r\n    }\r\n  }\r\n\r\n\r\n  async calculateDeparture(){\r\n    //The RECOMMENDED # of minutes to arrive before departure \r\n    const recommendedAirportTime = 120;\r\n\r\n    //The MINIMUM # of minutes to arrive before departure\r\n    const minimumAirportTime = 60;\r\n\r\n    const flightDepartureTime = moment(this.state.departureTime + this.state.departureTimeZone);\r\n    const flightDepartureTimeStr = flightDepartureTime.format('MMMM Do YYYY, h:mm:ss a');\r\n\r\n    const curTime = moment();\r\n    \r\n    \r\n    await axios.get('/time?' + 'origin=' + this.state.homeAddress + '&destination=' + this.state.departureSite +  '&trafficMode=best_guess')\r\n      .then(res => this.setState({directions: res.data.directions}));\r\n    \r\n\r\n    this.setState({regularCaseResult: this.state.directions});\r\n\r\n\r\n    //The recommended air port arrival time \r\n    const recommendedAirportArrivalTime = flightDepartureTime.clone().subtract(recommendedAirportTime, 'minutes');\r\n\r\n\r\n    //Travel time in minutes \r\n    const currentTravelTime = this.state.regularCaseResult.duration_in_traffic.value/60;\r\n\r\n    const recommendedDepartureTime =  recommendedAirportArrivalTime.clone().subtract(currentTravelTime, 'minutes');\r\n\r\n\r\n    // console.log(recommendedDepartureTime.format('MMMM Do YYYY, h:mm:ss a'));\r\n\r\n    //See if flight departure time minus recommended arrival gap minus bestguess travel time is < 90 mins\r\n    const minsUntilDeparture = moment.duration(recommendedDepartureTime.diff(curTime)).asMinutes(); \r\n\r\n\r\n    console.log(minsUntilDeparture);\r\n\r\n\r\n\r\n    //If > 90 mins, let user know lots of time left but remind users that traffic conditions change may be a factor\r\n    //display bestguess time directions and travel time \r\n    if(minsUntilDeparture > 90){\r\n      this.setState({travelInfo: \"Current Travel Time:\" + currentTravelTime + \"Flight Departure Time:\" + flightDepartureTimeStr});\r\n      this.setState({message: \"Over an hour left until you need to leave based on estimated travel time\"\r\n      + \"and flight departure! However, keep in mind that traffic conditions may change from now until departure.\"});\r\n    }\r\n\r\n     //If < 90 mins and > 30 mins, run pessimistic traffic model search and see if large delays \r\n      //If pessmistic travel time is < 30 mins recommend that user leaves soon\r\n\r\n      //If none of these cases are true, just state # of minutes until recommended departure time \r\n      //display bestguess directions, but BOTH bestguess and pessismistic travel times \r\n    else if(minsUntilDeparture > 30){\r\n\r\n      //Must wait for this call \r\n      try{\r\n        await axios.get('/time?' + 'origin=' + this.state.homeAddress + '&destination=' + this.state.departureSite + '&trafficMode=pessimistic')\r\n        .then(res => this.setState({worstCaseResult: res.data.directions}));\r\n      }\r\n      catch(error){\r\n        console.error('error fetching directions');\r\n      }\r\n\r\n    \r\n      //In case traffic is bad, check worst case traffic to see if user should leave earlier  \r\n      const worstCaseTravelTime = this.state.worstCaseResult.duration_in_traffic.value/60;\r\n\r\n\r\n      const estimatedWorstCaseDepartureTime = recommendedAirportArrivalTime.clone().subtract(worstCaseTravelTime, 'minutes');\r\n      const minsUntilWorstCaseDeparture = moment.duration(estimatedWorstCaseDepartureTime.diff(curTime)).asMinutes();\r\n      \r\n\r\n      if(minsUntilWorstCaseDeparture < 30){\r\n        this.setState({travelInfo: \"Current Travel Time:\" + currentTravelTime + \"-\" + worstCaseTravelTime + \"Flight Departure Time:\" + flightDepartureTimeStr});\r\n        this.setState({message: \"There is heavy traffic currently and your travel time may be much longer \" +\r\n        \"than usual. We recommend that you leave soon.\"});\r\n      }\r\n      else{\r\n        this.setState({travelInfo: \"Current Travel Time:\" + currentTravelTime + \"-\" + worstCaseTravelTime + \"Flight Departure Time:\" + flightDepartureTimeStr});\r\n        this.setState({message: \"You should not have to leave in the next 30 mins. However keep in mind traffic conditions may change.\"})\r\n      }\r\n    }\r\n\r\n\r\n    //If best guess < 30 mins, let user know that they should leave soon (and display time left) \r\n    //display bestguess time directions and travel time\r\n    else if(minsUntilDeparture > 0){\r\n      this.setState({travelInfo: \"Current Travel Time:\" + currentTravelTime + \"Flight Departure Time:\" + flightDepartureTimeStr});\r\n      this.setState({message: \"You should leave soon.\"});\r\n    }\r\n\r\n\r\n    //If best guess is negative time (not enough time left until departure)\r\n      //If using minimum arrival gap is positive, tell user they should leave immediately and \r\n    \r\n      //If still negative, add optimistic traffic model and check again...if positive, let user know\r\n      //to leave immediately but they might not make their flight \r\n\r\n      //If all the above added and still negative let user know that they will not be able to make their\r\n      //flight with DeparturePlanner calculations \r\n\r\n      //display optimistic time directions and travel time \r\n    else{\r\n      const latestAirportArrivalTime = flightDepartureTime.clone().subtract(minimumAirportTime, 'minutes');\r\n      const latestNormalDepartureTime = latestAirportArrivalTime.clone().subtract(currentTravelTime, 'minutes');\r\n      const minsUntilLatestNormalDeparture = moment.duration(latestNormalDepartureTime.diff(curTime)).asMinutes();\r\n\r\n      if(minsUntilLatestNormalDeparture > 0){\r\n        this.setState({travelInfo: \"Current Travel Time:\" + currentTravelTime + \"Flight Departure Time:\" + flightDepartureTimeStr});\r\n        this.setState({message: \"You should leave immediately. Based on our projections, any traffic or airport delays may cause you to miss your flight.\"});\r\n      }\r\n      else{\r\n        //Must wait for this call \r\n        try{\r\n          await axios.get('/time?' + 'origin=' + this.state.homeAddress + '&destination=' + this.state.departureSite + '&trafficMode=optimistic')\r\n          .then(res => this.setState({bestCaseResult: res.data.directions}));  \r\n        }\r\n        catch(error){\r\n          console.error('error fetching directions');\r\n        }\r\n\r\n      \r\n        const bestCaseTravelTime = this.state.bestCaseResult.duration_in_traffic.value/60;\r\n        const latestAbsoluteDepartureTime = latestAirportArrivalTime.clone().subtract(bestCaseTravelTime, 'minutes');\r\n        const minsUntilLatestAbsoluteDeparture = moment.duration(latestAbsoluteDepartureTime.diff(curTime)).asMinutes();\r\n\r\n        if(minsUntilLatestAbsoluteDeparture > 0){\r\n          this.setState({travelInfo: \"Current Travel Time:\" + bestCaseTravelTime + \"-\" + currentTravelTime + \"Flight Departure Time:\" + flightDepartureTimeStr});\r\n          this.setState({message: \"We recommend you leave immediately. Based on our projections, any traffic or airport delays may cause you to miss your flight.\"});\r\n        }\r\n        else{\r\n          this.setState({travelInfo: \"Current Travel Time:\" + bestCaseTravelTime +  \"-\" + currentTravelTime + \"Flight Departure Time:\" + flightDepartureTimeStr});\r\n          this.setState({message: \"According to our calculations, you are most likely unable to make this flight.\"});\r\n        } \r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  render(){\r\n    return(\r\n      <div>\r\n        <Header></Header>\r\n          <div>\r\n            {this.state.directions !== null && \r\n            <div className=\"mapPane\">  \r\n              <DirectionsMap\r\n                directions={this.state.directions}\r\n                googleMapURL={this.state.mapsAPI}\r\n                // origin={this.state.departureSite} \r\n                // destination={this.state.homeAddress} \r\n                // travelMode={this.state.travelMode} \r\n                // drivingOptions={this.state.drivingOptions}\r\n                /> \r\n            </div>\r\n            }\r\n\r\n            <p>{this.state.message}</p>\r\n            <p>{this.state.travelInfo}</p>\r\n\r\n            <p>{this.state.departureSite}</p>\r\n            <p>{this.state.arrivalSite}</p>\r\n            <p>{this.state.airline}</p>\r\n            <p>{this.state.flightNum}</p>\r\n            <p>{this.state.departureTime}</p>\r\n            <p>{this.state.departureTimeZone}</p>\r\n          </div>\r\n    </div>\r\n    );\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}